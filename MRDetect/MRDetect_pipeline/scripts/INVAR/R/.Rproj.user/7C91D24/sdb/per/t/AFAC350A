{
    "collab_server" : "",
    "contents" : "---\ntitle: \"JXP0096_iTAm-Seq_analysis\"\nauthor: \"Jonathan Wan\"\ndate: \"20 September 2016\"\noutput: html_document\n---\n\nThis rmd is based on JXP009_plotting/JXP009_parsing Rmds made previously. The aim of this Rmd is to parse all raw data for the iTAm-Seq paper, and start analysis on it.\n\nFirst define functions for parsing non-sequencing input data. Need to first mount group \n\n\n```{r Parse JXP0096 - TAm-Seq }\nsource(\"~/tapas_paper/functions.R\")\nsetwd(\"/Users/wan01/groups/research/nrlab/group/group_folders/JONATHAN/MelR/itamseq_raw/input/\")\n\n## Read in clinical data\nclin <- parse_clinical_data(\"MelR_data290616.csv\")\nLDH <- get_LDH(\"MelR_data290616.csv\")\n\n## Read in barcodes/names and cfDNA information for all experiments run for this iTAm-Seq project\nbarcodes <- read.csv(file = \"barcodes_cfDNA.csv\") \n\n## Read in biorep blood test dates\nget_blood_test_dates(\"MELR_BIOREPOSITORY_SAMPLELIST_20150409.csv\")\n\n## Read in raw sequencing data from test samples (i.e. containing patient samples)\nsetwd(\"../test_samples\")\nraw <- import_raw_data_test_samples()\nraw <- swap_barcodes(raw) ## Convert barcodes to real names\nraw$FLD_n <- as.numeric(substr(raw$FLD, 5,7))\n\n## Add timepoint data to raw dataframe\nraw$pt_timepoint <- paste(raw$patient, raw$Timepoint, sep=\"_\")\nblood.test.dates$pt_timepoint <- paste(blood.test.dates$patient, blood.test.dates$timepoint, sep=\"_\")\nraw_cfDNA <- merge(raw, blood.test.dates[,c(3,5)], by='pt_timepoint')\n\n## Read in control PPC data in preparatation for mutation calling\nsetwd(\"../controls\")\ncontrols <- import_raw_data_test_samples()\ncontrols <- swap_barcodes(controls)\n### Note that horizon DNA might have a BRAF mutation in it?? Otherwise probably suitable as a control\n\nraw$uniq <- paste(raw$SLX, raw$FLD, sep=\"_\")\n\nmut_rate_per_read <- plyr::ddply(raw, c('uniq', 'ID_long', 'patient', 'Timepoint'), function(x){\n  data.frame(reads = sum(x$reads, na.rm = T), \n             depth = sum(x$depth, na.rm = T), \n             mut_rate = sum(x$reads, na.rm = T)/sum(x$depth, na.rm = T))\n})\n\n\n## Get a mut rate for BRAF only\n\nraw_BRAF <- raw[grepl(raw$mut_uniq, pattern = 'BRAF|NRAS'),]\n\nraw_BRAF <- raw_BRAF[!grepl(raw_BRAF$mut_uniq, pattern = \"G12\"),]\nraw_BRAF <- raw_BRAF[!grepl(raw_BRAF$mut_uniq, pattern = \"G12\"),]\n\nBRAF_mut_rate_per_read <- plyr::ddply(raw_BRAF, c(\"mut_uniq\", 'uniq', 'ID_long', 'patient', 'Timepoint'), function(x){\n  data.frame(reads = sum(x$reads, na.rm = T), \n             depth = sum(x$depth, na.rm = T), \n             mut_rate = sum(x$reads, na.rm = T)/sum(x$depth, na.rm = T))\n})\nmut_rate_per_read <- dplyr::filter(BRAF_mut_rate_per_read, depth > 1000)\n\n# annotate\nmut_rate_per_read[grepl(mut_rate_per_read$ID_long, pattern = \"URINE\"),'sample_type'] <- \"urine\"\nmut_rate_per_read[!grepl(mut_rate_per_read$ID_long, pattern = \"URINE\"),'sample_type'] <- \"plasma\"\nmut_rate_per_read[grepl(mut_rate_per_read$ID_long, pattern = \"PD\"), \"sample_type\"] <- \"tumour\"\n\nmut_rate_per_read[grepl(mut_rate_per_read$ID_long, pattern = \"PPC\"), \"case_or_control\"] <- \"control\"\nmut_rate_per_read[!grepl(mut_rate_per_read$ID_long, pattern = \"PPC\"), \"case_or_control\"] <- \"case\"\nmut_rate_per_read$dilution <- grepl(mut_rate_per_read$ID_long, pattern = \"dil|x\")\n\ntamseq <- filter(mut_rate_per_read, sample_type == \"plasma\", case_or_control == \"case\", dilution == F, !grepl(\"H2O|BC|BUFFY\", ID_long))\ncontrol <- filter(mut_rate_per_read, sample_type == \"plasma\", grepl(\"PPC\", ID_long))\n\n# get threshold for BRAF \nthresholds <- plyr::ddply(control, \"mut_uniq\", function(x){\n   data.frame(threshold = quantile(x$mut_rate, 0.97))\n})\n\n# only take NRAS for MR1032\ntamseq <- filter(tamseq, (grepl(\"NRAS\", mut_uniq) & patient == \"MR1032\") | (grepl(\"140453136_A_T_BRAF\", mut_uniq) & patient != \"MR1032\"))\n\ntamseq.average <- plyr::ddply(tamseq, c(\"mut_uniq\", \"patient\", \"Timepoint\"), function(x){\n  data.frame(reads = sum(x$reads, na.rm = T), \n             depth = sum(x$depth, na.rm = T), \n             mut_rate = sum(x$reads, na.rm = T)/sum(x$depth, na.rm = T))\n})\n\ntamseq.average <- left_join(tamseq.average, thresholds, by = \"mut_uniq\")\ntamseq.average$detection <- tamseq.average$mut_rate > tamseq.average$threshold\n\n# plot\nggplot(tamseq.average, aes(x = Timepoint, y = mut_rate, fill = detection, group = mut_uniq))+\n  geom_point(shape = 21)+\n  geom_line()+\n  facet_grid(patient ~ .)+\n  scale_y_log10()\n\nwrite.table()\n```\n\n\nNow try and plot \n\n```{r Plot MR1002}\nlibrary(ggplot2)\n\n### exclude the half of the chip that failed for MR1002 (FLD0025 - 48 failed on SLX-10553)\nfilter(raw_cfDNA, FLD_n < 24) %>%\n  filter(patient =='MR1002', depth >= 10) %>%\n  ggplot(aes(x=days, y=AF))+\n  geom_point()\n\n## Plot only mutations where every timepoint has >500x depth\nto_plot <- filter(raw_cfDNA, FLD_n < 24) %>%\n  filter(patient=='MR1002') %>%\n  dplyr::select(mut_uniq, depth) %>%\n  group_by(mut_uniq) %>%\n  slice(which.min(depth)) %>%\n  filter(depth > 500) %>%\n  data.frame()\n\nMR1002_to_plot_tam_seq<- raw_cfDNA[raw_cfDNA$mut_uniq %in% to_plot$mut_uniq,] %>% \n  filter(FLD_n < 24) %>%\n  filter(patient =='MR1002', depth >= 10)\n\n  ggplot(aes(x=days, y=AF, group=mut_uniq))+\n  geom_line()\n\n\nfor (x in 1:length(unique(MR1002_to_plot_tam_seq$mut_uniq))){ #\nprint(paste('locus', x, 'out of',length(unique(MR1002_to_plot_tam_seq$mut_uniq)) ))\n  \ncurr_locus <- unique(MR1002_to_plot_tam_seq$mut_uniq)[x]\ncurr <- MR1002_to_plot_tam_seq[MR1002_to_plot_tam_seq$mut_uniq %in% curr_locus,]\n\ncurr <- curr[order(curr$days),]\n\nif (x == 1){\nMR1002.plasma.plot <-\n  plot(curr$days, \n       curr$AF,\n       type=\"l\", \n       lwd=1.5, \n       axes=T,\n       main =\"MR1002 plasma ctDNA allele fraction over time\", \n       xlab='Days',\n       ylab = \"Mutant AF\",\n       bty='n',\n       xlim= c(0,max(MR1002_to_plot$days)+ 10),\n       ylim=c(0,0.7),\n       cex.lab=1.2)\n} else{\n par(new=T)\n  plot(curr$days, \n       curr$AF,\n       type=\"l\", \n       lwd=1.5, \n       main =\"\", \n       xlab='',\n       ylab = \"\",\n       bty='n',\n       xlim= c(0,max(MR1002_to_plot$days)+ 10),\n       ylim=c(0,0.7),\n       cex.lab=1.2, axes = F, col = alpha('black',0.5))\n  }\n}\n\n### Add in progression info #######\n### Parse clinical data + treatment dates\nMR1002.clin.data[,5:7] -> MR1002.Rx\nMR1002.clin.data[,3:4] -> MR1002.progression_data\n\nMR1002.Rx[!is.na(MR1002.Rx$Start),] -> MR1002.Rx\n\nMR1002.progression_data[!is.na(MR1002.progression_data$Tumour_assessment_date),] -> MR1002.progression_data\n\n\n#### Add rectangles for treatment\nrect(MR1002.Rx$Start, rep(0,nrow(MR1002.Rx)), MR1002.Rx$Stop, max.AF, border=NA, col = rainbow(4, alpha=0.05)[c(1,1)]) \n\n### Add name of therapy\ntext(as.numeric(MR1002.Rx$Start + MR1002.Rx$Stop)/2, max.AF-0.05, 'VEMURAFENIB', pos=c(1), col='red', cex = 0.7)\n  \n\n######## Draw vertical lines for treatment progression\nabline(v = MR1002.progression_data$Tumour_assessment_date, untf = FALSE, col='black', lty=2)\n\nmtext(MR1002.progression_data$Response, side = 3, outer=F, line=0.1, at = MR1002.progression_data$Tumour_assessment_date, cex=1) \n  \n```\n\n\n```{r Plot mixture experiment}\nlibrary(ggplot2)\n\n## All depths are sufficient in this case (MR1022)\nmixture <- raw_cfDNA[!is.na(raw_cfDNA$depth),] %>% \n  filter(patient == 'MR1022', Timepoint == 5, Type =='cfDNA')\n\nmixture$ID_long<- factor(mixture$ID_long, levels= c('Q02_MELR_JW_01-022_T5_58', 'MELR_JW_01-022_T5_5x', 'MELR_JW_01-022_T5_25x', 'MELR_JW_01-022_T5_125x','MELR_JW_01-022_T5_625x','MELR_JW_01-022_T5_3125x','MELR_JW_01-022_T5_15625x'))\n\nlibrary(scales)\n\nggplot(mixture, aes(x = ID_long, y=AF))+\n  geom_point()+\n  scale_y_log10(breaks = c(1,0.1,0.01,0.001), limits = c(0.0001, 1))\n\nggplot(mixture, aes(x = ID_long, y=AF))+\n  geom_boxplot()+\n   scale_y_log10(breaks = c(1,0.1,0.01,0.001), limits = c(0.0001, 1))\n\n## Get the mean AF in each sample\ntest <- plyr::ddply(mixture, 'ID_long', function(x) {\n  data.frame(mean(x$AF))})\n\ntest$expected_AF <- c(0.049, 0.049/10, 0.049/100, 0.049/1000, 0.049/10000, 0.049/100000, 0.049/1000000)\n\nplot(test$expected_AF, test$mean.x.AF.)\n\nplot(test$expected_AF*100, as.numeric(test$mean.x.AF.)*100, \n     log='xy',\n     xlim=c(5, 0.0005), \n     ylim=c(0.005, 5),\n     bg = c(rep('red',2), rep('white', 3)),\n     xlab = 'Expected allele fraction %',\n     ylab = 'Observed allele fraction %',\n     type = 'p', \n     pch = 21, \n     col= 'black')\nabline(a = 0.0492, 1)\n\n## Get the Af for BRAF in each sample\nBRAF <- mixture[grepl(mixture$mut_uniq, pattern = 'BRAF'),]\noverall_AF <- plyr::ddply(BRAF, 'ID_long', function(x) {\n  data.frame(mean(x$AF))})\n\noverall_AF$expected_AF <- c(0.13, 0.13/10, 0.13/100, 0.13/1000, 0.13/10000, 0.13/100000, 0.13/1000000)\n\nplot(overall_AF$expected_AF*100, as.numeric(overall_AF$mean.x.AF.)*100, \n     log='xy',\n     xlim=c(20, 0.000005), \n     ylim=c(0.0005, 20),\n     #bg = c(rep('red',2), rep('white', 3)),\n     xlab = 'Expected allele fraction %',\n     ylab = 'Observed allele fraction %',\n     type = 'p', \n     pch = 21, \n     col= 'black')\nabline(a = 0.13, 1)\n\n## Get the highest AF muts only\nhigh_AF_muts <- unique(mixture[mixture$AF > 0.01, 4])\nhigh_AF<- mixture[mixture$mut_uniq %in% high_AF_muts,]\n\noverall_AF <- plyr::ddply(high_AF, 'ID_long', function(x) {\n  data.frame(mean(x$AF))})\n\ntop_value <- max(overall_AF$mean.x.AF.)\noverall_AF$expected_AF <- c(top_value , top_value/10, top_value/100, top_value/1000, top_value/10000, top_value/100000, top_value/1000000)\n\n## threshold for detection of BRAF is 0.0035 based on background distribution (roughly)\noptions(scipen=1)\nplot(overall_AF$expected_AF*100, as.numeric(overall_AF$mean.x.AF.)*100, \n     log='xy',\n     xlim=c(5, 0.000005), \n     ylim=c(0.0005, 5),\n     bg = ifelse(as.numeric(overall_AF$mean.x.AF.) > 0.0035 ,'red','white'),\n     xlab = 'Expected allele fraction %',\n     ylab = 'Observed allele fraction %',\n     type = 'p', \n     pch = 21, \n     col= 'black')\nabline(a = top_value, 1)\n\n#write.csv(overall_AF, file = \"~/Desktop/JXPT/JXP0096/JXP0096_BRAF_mixture_experiment_overall_AF.csv\", quote = F, row.names = F)\n```\n\nInterestingly, the sensitivity is not improved by looking at additional mutations in this situation??\n",
    "created" : 1524559899222.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "108|18|194|0|\n",
    "hash" : "199824063",
    "id" : "AFAC350A",
    "lastKnownWriteTime" : 1524564931,
    "last_content_update" : 1524573099944,
    "path" : "~/Desktop/JXPT/JXP0096/JXP0096_170122.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}