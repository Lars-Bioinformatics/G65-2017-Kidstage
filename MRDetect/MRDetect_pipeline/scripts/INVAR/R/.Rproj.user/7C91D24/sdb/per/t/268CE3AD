{
    "collab_server" : "",
    "contents" : "---\ntitle: \"TAPAS5 â€” final functions for paper submission\"\nauthor: \"Katrin Heider\"\ndate: \"06/03/2018\"\noutput: html_document\n---\n\nThis script will contain only the final functions and plots needed for the paper submission.\n\nTo do: generalise BQ, MQ , error-suppression settings\n\n# Settings\n```{r Load settings}\n# load libraries\nlibrary(plyr)\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotROC)\nlibrary(ComplexHeatmap)\nlibrary(stringr)\nlibrary(grid)\nlibrary(RColorBrewer)\nlibrary(ggpubr)\n\nsetwd(\"~/tapas_paper/\")\n\n# set username -----------------------------\nuser <- gsub(getwd(), pattern = \".*/(.*[0][1-9])/.*\", replacement = \"\\\\1\")\n\nsource(\"~/tapas_pipeline/R/TAPAS_functions.R\")\nsource(\"~/tapas_paper/functions.R\")\n\n# upload and prepare SLX layout table -----------------------------\nSLX_layout <- read.csv(file = \"~/tapas_pipeline/inputs/combined.SLX_table.180124.csv\",\n    header = TRUE)\nSLX_layout$barcode. <- gsub(SLX_layout$barcode., pattern = \"-\", replacement = \"_\")\nSLX_layout$SLX_barcode <- paste0(SLX_layout$SLX_ID, \"_\", SLX_layout$barcode.)\n\nif (user == \"heider01\") {\n  # Set study, choose from LUCID, MELR\n  study <- \"LUCID\"\n  # set setting, choose from: f0.9_s2.BQ_20.MQ_40, f0.6_s2.BQ_20.MQ_40, f0.9_s1.BQ_20.MQ_40, f0.9_s3.BQ_20.MQ_40, f0.9_s5.BQ_20.MQ_40\n  setting <- \"f0.9_s2.BQ_20.MQ_40\"\n  # set experiment. choose from KH077, KH078 (raw seq data), KH079 (family sizes LUCID), and FAMILY_SIZE_COMPARISON\n  experiment <- \"KH077\"\n  \n    LUCID_pathology <- read.csv(file = paste0(tapas_mount_point, \"group_folders/TAPAS/input/LUCID/LUCID_pathology_batch1_summary.csv\"), header = TRUE)\n  names(LUCID_pathology)[names(LUCID_pathology) == \"LUCID_ID\"] <- \"Patient\"\n  LUCID_pathology$Patient <- as.factor(LUCID_pathology$Patient)\n  LUCID_pathology$path_stage_summary <- gsub(LUCID_pathology$Pathological.Stage, pattern = \"^IIA|^IIB\", replacement = \"II\")\n\n} else if(user == \"wan01\") {\n  study <- \"MELR\" # \"MELR\"\n  setting = \"f0.9_s5.BQ_20.MQ_40\"\n}\n\n#source config3 - should this stay here at the bottom of the chunk?\nsource(\"~/tapas_paper/config/config3.R\")\n\n```\n\n# Combining all FAMILY SIZE 2 data frames into one large one\n\n```{r Load combined.polished df}\nfiles <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = glob2rx(paste0(\"*.f0.9_s2\", \"*combined.polished.rds\")), full.names = T)\nfiles <- files[c(1,4,8)]\n\nall_cohorts_combined.polished <- data.frame()\n\nfor (x in 1:length(files)){\n  print(paste(\"working on\", files[x]))\n  curr <- readRDS(files[x])\n  \n  # get setting info and add to file\n  setting <- gsub(files[x], pattern = \".*(f0.[69]_s[1-9].BQ_20.MQ_40).*\", replacement = \"\\\\1\")\n  curr$setting <- setting\n  \n  # combine files\n  all_cohorts_combined.polished <- rbind(curr, all_cohorts_combined.polished)\n}\n\nall_cohorts_combined.polished$setting <- \"f0.9_s2.BQ_20.MQ_40\"\n# filter with previous polishing filters\nall_cohorts_combined.polished.filtered <- filter(all_cohorts_combined.polished,\n                                                 PASS == TRUE,\n                                                 BOTH_STRANDS == TRUE,\n                                                 # comment out for now, otherwise losing MELR samples\n                                                 #CONTAMINATION_RISK.PASS == TRUE,\n                                                 LOCUS_NOISE.PASS == TRUE)\n```\n\n# Panel design and mutations included\n\n```{r Panel design}\n############### plotting 3bp context for MELR, using combined classes.\ncontext_plot <- filter(all_cohorts_combined.polished.filtered, data == \"ptspec\", setting == \"f0.9_s2.BQ_20.MQ_40\")\ncontext_plot <- filter(context_plot, Patient != \"MR1002; MR1004; MR1006; MR1010; MR1020; MR1022\")\ncontext_plot <- context_plot[!duplicated(context_plot[,c(\"pt_uniq_pos\")]),]\n\ncontext_plot$Study <- factor(context_plot$Study, levels = c(\"LUCID\", \"AVASTM\", \"MELR\"))\n\nggplot(data = context_plot, aes(x = as.character(TRINUCLEOTIDE), fill = mut_class)) +\n  geom_bar() +\n  theme_classic() +\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        axis.text.x = element_text(angle = 90),\n        legend.position = \"bottom\") +\n  labs(x = \"Mutation context\",\n       y = \"Count\",\n       title = \"Mutation context in cohort panels\",\n       subtitle = \"uniq ptspec mutations in polished filtered data\")+\n  facet_wrap( ~ Study, ncol = 1 , scales = \"free_y\")\nggsave(paste0(plot_dir, \"p6_cohort_mut_context.pdf\"), width = 6, height = 8)\n\n# plot the AF by mutation class\nggplot(data = filter(context_plot, tumour_AF > 0), aes(x = tumour_AF, fill = mut_class)) +\n  geom_histogram(binwidth = 0.02, position = \"stack\") +\n  theme_classic() +\n  labs(x = \"AF tumour\",\n       y = \"Mutation count\",\n       title = \"Mutation count in LUCID tumour data\") +\n  scale_fill_discrete(name = \"Mutation\") +\n  facet_wrap( ~ Study, ncol = 1 , scales = \"free_y\")\nggsave(paste0(plot_dir, \"p51_cohort_mut_AF_by_class.pdf\"), width = 6, height = 8)\n\n# now plotting the number of mutations per patient in the filtered polished data frame\npt_summary <- plyr::ddply(context_plot, \"Patient\", function(x){\n  Study <- unique(x$Study)\n  mutations <- nrow(x)\n  data.frame(Study, mutations)\n})\n\npt_summary$Study <- factor(pt_summary$Study, levels = c(\"LUCID\", \"AVASTM\", \"MELR\"))\n\nq <- ggplot(data = pt_summary, aes(x = reorder(Patient, mutations), y = mutations))+\n  geom_bar(stat = \"identity\")+\n  theme_bw()+\n  labs(x = \"Patient\",\n       y = \"Mutations\",\n       title = \"Mutations per patient\")+\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        axis.text.x = element_blank(),\n        legend.position = \"bottom\") +\n  facet_grid(. ~ Study, scales = \"free_x\")\n\ngt = ggplotGrob(q)\n\n# From 'dfm', get the number of 'strain' for each 'type'.\n# That is, the number x-breaks in each panel.\nN <- pt_summary %>% group_by(Study) %>% \n     summarise(count = length(unique(Patient))) %>% \n     `[[`(2)\n\n# Get the column index in the gt layout corresponding to the panels.\npanelI <- gt$layout$l[grepl(\"panel\", gt$layout$name)]\n\n# Replace the default panel widths with relative heights.\ngt$widths[panelI] <- unit(N, \"null\")\n\n## Draw gt\ngrid.newpage()\ngrid.draw(gt)\n\nggsave(plot = grid.draw(gt), paste0(plot_dir, \"p52_cohort_mut_by_patient.pdf\"), width = 17, height = 6)\n\npt_summary$Patient <- factor(pt_summary$Patient, levels=pt_summary$Patient[order(pt_summary$Study, pt_summary$mutations)])\nggplot(data = pt_summary, aes(x = Patient, y = mutations, color = Study))+\n  geom_point()+\n  theme_bw()+\n  labs(x = \"Patients\",\n       y = \"Mutations\")+\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        axis.text.x = element_blank(),\n        legend.position = c(0.25, 0.85))+\n  scale_color_discrete(name = \"Cohort\",\n                       breaks = c(\"LUCID\", \"AVASTM\", \"MELR\"),\n                       labels = c(\"early stage lung\", \"early stage melanoma\", \"advanced stage melanoma\"))\nggsave(paste0(plot_dir, \"p52_cohort_mut_by_patient.geom_point.pdf\"), width = 6, height = 6)\n\n# plot mutation class distribution by cohort\ncontext_plot_mutclass.summary <- plyr::ddply(context_plot, c(\"Study\", \"mut_class\"), function(x){\n  mutations <- nrow(x)\n  data.frame(mutations)\n})\n\nstudy_mutations_total <- as.data.frame(table(context_plot$Study))\ncolnames(study_mutations_total)  <- c(\"Study\", \"total_mutations\")\n\ncontext_plot_mutclass.summary <- left_join(context_plot_mutclass.summary, study_mutations_total, by = \"Study\")\ncontext_plot_mutclass.summary$fraction <- context_plot_mutclass.summary$mutations/context_plot_mutclass.summary$total_mutations\n\nggplot(data = context_plot_mutclass.summary, aes(x = mut_class, y = fraction, fill = Study)) +\n  geom_bar(stat = \"identity\", position = \"dodge\")+\n  theme_classic() +\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        axis.text.x = element_text(angle = 90),\n        legend.position = c(0.75, 0.7))+\n  labs(x = \"Mutation class\",\n       y = \"Fraction\",\n       title = \"Mutation class in cohort panels\",\n       subtitle = \"uniq ptspec mutations in polished filtered data\")+\n  scale_fill_discrete(name = \"Cohort\",\n                       breaks = c(\"LUCID\", \"AVASTM\", \"MELR\"),\n                       labels = c(\"early stage lung\", \"early stage melanoma\", \"advanced stage melanoma\"))\n\n  #facet_wrap( ~ Study, ncol = 1 , scales = \"free_x\")\nggsave(paste0(plot_dir, \"p53_cohort_mut_class.pdf\"), width = 6, height = 7)\n```\n\n# Analysis and comparison of sequencing depth\n\n```{r Raw depth analysis}\nfile <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), full.names = T, pattern = \"prefilter\") \n\nfile <- file[grepl(file, pattern = \"raw\")]\n\nanalysing.raw.sequencing.depth(file[3], SLX_layout, plot = T)\n\n```\n\n```{r median sequencing depth per sample }\nfile <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), full.names = T, pattern = \"prefilter\") \n\nfile <- file[grepl(file, pattern = \"raw\")]\n\noutput <- data.frame()\nfor (x in 1:length(file)){\n  print(file[x])\n  curr <- sequencing_depth_per_sample(file[x], SLX_layout)\n  output <- rbind(curr, output)\n}\n\noutput <- data.table(output)\n\nmedian_DP_per_sample <- output[,.(median_DP = median(DP)),\n        by = list(SLX_barcode, study)]\n\nwrite.table(median_DP_per_sample, \n            file = paste0(tapas_mount_point, \"group_folders/TAPAS/output/supplementary_tables/sequencing_DP_per_sample.txt\"),quote = F,\n            row.names = F)\n\nfilter(median_DP_per_sample, !grepl(\"URINE\", study)) %>%\nggplot(aes(x = reorder(SLX_barcode, median_DP), \n           y = median_DP, \n           colour = median_DP < 250))+\n  geom_point()+\n  scale_y_log10(breaks = c(100,1000,10000))+\n  facet_grid(study ~ .)+\n  labs(x = \"Sample\",\n       y = \"Median DP across loci in that sample\",\n       title = \"Median DP per sample\",\n       subtitle = paste(\"Raw sequencing depth across studies\"))+\n  theme_classic()+\n  theme(axis.text.x = element_blank())\nggsave(paste0(plot_dir, \"p55_raw_sequencing_depth_across_studies.pdf\"), width = 6, height = 7)  \n\n```\n\n# Polishing\n\n```{r data pre/post polishing}\nfiles <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = \"combined.polished.rds\", full.names = T)\n\nfile <- files[3]\n\ncurr <- readRDS(file)\n\nstudy <- gsub(file, pattern = \".*(MELR|AVASTM|LUCID).*\", replacement = \"\\\\1\")\nsetting <- gsub(file, pattern = \".*(f0.9_s[0-9]).*\", replacement = \"\\\\1\")\n\ncurr <- filter(curr,data == \"ptspec\" |(data == \"nonptspec\" & COSMIC_MUTATIONS == 0))\n\ncurr.polished <- curr\n#curr.polished <- background_polish(curr, cluster_or_local = \"local\", p_value = 0.05)\n\n## proportion of data removed by outlier suppression\nfilter(curr.polished, LOCUS_NOISE.PASS == TRUE, BOTH_STRANDS == TRUE, CONTAMINATION_RISK.PASS == TRUE,\n       AF> 0, AF < 0.1) %>%\n  plyr::ddply(  \"data\", function(x){\n    nrow_pass <- nrow(filter(x, PASS == TRUE))\n    #nrow_fail <-  nrow(filter(x, PASS != TRUE))\n    data.frame(proportion = nrow_pass/nrow(x), total_rows = nrow(x))\n  }) \n\n# Plot p62\np62 <- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/output/supplementary_tables/data_lost_to_outlier_suppression.csv\"))\n\np62 <- reshape2::melt(p62) %>%\n  filter(grepl(\"pass\", variable))\n\np62$variable <- gsub(p62$variable, pattern = \"(ptspec|nonptspec).*\", replacement = \"\\\\1\")\ncolnames(p62)[3] <- \"proportion\"\n\nggplot(p62, aes(x = variable, y = proportion, fill = Study))+\n    geom_bar(position = \"dodge\", stat = \"identity\")+ \n    xlab(\"Study\") +\n    ylab(\"% signal retained after outlier suppression\")+\n          labs(title = paste0(\"Effect of outlier-suppression\"), \n               subtitle = paste(\"threshold = 0.05\"))+\n  theme_bw()\nggsave(paste0(plot_dir, \"p62_background_polishing.data_retained.threshold_0.05.pdf\"), width = 5, height = 4)\n\n#plot p34\nfilter(curr.polished, AF > 0, AF<0.1, BOTH_STRANDS == TRUE, \n       LOCUS_NOISE.PASS == TRUE, \n       CONTAMINATION_RISK.PASS == TRUE) %>%\n          ggplot2::ggplot(aes(x = sample_name, y = AF, colour = PASS ))+\n          geom_point()+\n          theme_classic()+\n          scale_y_log10()+\n          facet_grid(data ~ .)+\n          xlab(\"Sample\") +\n          ylab(\"Mutant allele fraction\")+\n          theme(axis.text.x=element_blank())+\n          labs(title = paste0(\"Effect of outlier-suppression\"), \n               subtitle = paste(study, setting, \"threshold = 0.05\"))\nggsave(paste0(plot_dir, \"p34_background_polishing\", \".threshold_0.05.\",study, \".\", setting, \".pdf\"), width = 6, height = 6)\n\nnonptspec  <- filter(curr.polished, BOTH_STRANDS == TRUE, LOCUS_NOISE.PASS == TRUE, PASS == T, data == \"nonptspec\", AF>0) \n\nptspec  <- filter(curr.polished, BOTH_STRANDS == TRUE, LOCUS_NOISE.PASS == TRUE, PASS == T, data == \"ptspec\", AF>0) \nfilter(ptspec, AF > tumour_AF)\n\n\n```\n\n# LOD per cohort and sequencing QC\n\n```{r get overall LOD per cohort}\nfiles.raw <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = \"combined.polished.rds\", full.names = T)\n\noutput <- data.frame()\n\nfor (study in c(\"LUCID\\\\.\", \"MELR\\\\.\", \"AVASTM\\\\.\")){ #\"MELR\\\\.\", \n\n  files <- files.raw[grepl(files.raw, pattern = study)]\n  error_suppression <- gsub(files, pattern = \".*(f0.[69]_s[0-9]).*\", replacement = \"\\\\1\")\n\n  for (x in error_suppression){\n    print(paste(\"working on\", study, x))\n    print(files[grepl(files, pattern = x)][1])\n    curr <- readRDS(files[grepl(files, pattern = x)][1])\n\n    curr <- filter(curr, data == \"ptspec\")\n    overall_LOD <- 1/weighted.mean(curr$background_AF, curr$background.DP)\n    print(overall_LOD)\n    temp <- data.frame(overall_LOD = overall_LOD, study = study, error_suppression = x)\n    \n    output <- rbind(temp, output)\n  }\n}\n\noutput$study <- gsub(output$study, pattern = \"\\\\\\\\.\", replacement = \"\")\noutput <- output[!duplicated(output$overall_LOD),]\noutput$consensus_threshold <- gsub(output$error_suppression, pattern = \"f(0.[69]).*\", replacement = \"\\\\1\")\noutput$family_size <- gsub(output$error_suppression, pattern = \".*s([0-9])\", replacement = \"\\\\1\")\noutput$overall_error_rate <- 1/output$overall_LOD\n\nfilter(output, consensus_threshold == \"0.9\") %>%\nggplot(aes(x = family_size, y = overall_LOD, colour = study))+\n  geom_jitter(alpha = 0.9, height = 0, width = 0.1)+\n  scale_y_log10(breaks = c(5e4, 1e5, 2e5, 5e5, 1e6))+\n  labs(x = \"Minimum family size\",\n       y = \"Initial limit of detection (1/overall error rate)\",\n       title= \"Limits of detection per cohort per family size\",\n       subtitle = \"Weighted mean based on the mutation profile of the panel design\")+\n  theme_bw()\nggsave(paste0(plot_dir, \"p56_all_cohorts_overall_error_rates.pdf\"), width = 6, height = 4)\n\nfilter(output, consensus_threshold == \"0.9\", study != \"AVASTM\") %>%\nggplot(aes(x = family_size, y = overall_error_rate, colour = study))+\n  geom_point(alpha = 0.9, size = 3)+ #height = 0, width = 0.1\n  scale_y_log10(breaks = c(1e-6, 2e-6, 5e-6, 1e-5))+\n  labs(x = \"Minimum family size\",\n       y = \"Overall error rate\",\n       title= \"Overall error rate per cohort per family size\",\n       subtitle = \"Weighted mean based on the mutation profile of the panel design\")+\n  theme_bw()+\n  scale_color_discrete(name = \"Study\",\n                       breaks = c(\"LUCID\", \"MELR\"),\n                       labels = c(\"Early stage lung\", \"Late stage melanoma\"))\nggsave(paste0(plot_dir, \"p65_overall_error_rates_by_family.pdf\"), width = 6, height = 4)\n```\n\n```{r select setting for cohort and identify QC fails}\n## which setting to use for each cohort\noutput <- data.frame()\n\nfor (study in c(\"LUCID\\\\.\", \"MELR\\\\.\", \"AVASTM\\\\.\")){ #\"MELR\\\\.\", \n  print(study)\n  files <- files.raw[grepl(files.raw, pattern = study)]\n  error_suppression <- \"f0.9_s2\"\n\n  curr <- readRDS(files[grepl(files, pattern = \"f0.9_s2\")][1])\n\n  curr <- filter(curr, data == \"ptspec\")\n  \n  summary <- plyr::ddply(curr, c(\"SLX_barcode\", \"sample_name\"), function(x){\n                data.frame(nrow = nrow(x), total_DP = sum(x$DP))\n                })\n  \n  summary$study <- study\n  \n  output <- rbind(summary, output)\n\n}\noutput$study <- gsub(output$study, pattern = \"\\\\\\\\.\", replacement = \"\")\n\n## annotate with seq depth\nsequencing_QC <- read.table(paste0(tapas_mount_point, \"group_folders/TAPAS/output/supplementary_tables/sequencing_DP_per_sample.txt\"), header = T)\n\noutput <- left_join(output, sequencing_QC[,c(1,3),], by = \"SLX_barcode\")\n\nggplot(output, aes(x = study, y = total_DP, colour = total_DP < 1e4))+\n  geom_point(alpha = 0.7)+\n  scale_y_log10(breaks = c(1e4,1e5,1e6))+\n  labs(x = \"Study\",\n       y = \"Total families\",\n       title= \"Total molecules (families) per sample\",\n       subtitle = \"All studies; f0.9_s2; samples < 10k families failed QC\")+\n  theme_bw()\nggsave(paste0(plot_dir, \"p58_families_per_sample_f0.9_s2.pdf\"), width = 6, height = 4)\n\noutput$Patient <- gsub(output$sample_name, pattern = \".*\\\\((.*)\\\\)$\", replacement = \"\\\\1\")\nlength(unique(filter(output, study == \"AVASTM\", total_DP > 1e4)$Patient))\n\nggplot(output, aes(x = median_DP, y= total_DP, colour = median_DP < 500))+\n  geom_point()+\n  scale_y_log10()+\n  scale_x_log10()\n\nwrite.csv(output, \n            file = paste0(tapas_mount_point, \"group_folders/TAPAS/output/supplementary_tables/families_per_sample.csv\"),quote = F,\n            row.names = F)\n\n\n```\n\n```{r S4 - supplementary table of sequencing depth and families}\nS4<- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/output/supplementary_tables/families_per_sample.csv\"))\nS4$low_sensitivity <- S4$total_DP < 25000\nS4$QC_fail <- S4$total_DP < 5000\n\nS4 <- S4[!grepl(S4$sample_name, pattern = \"5ng\"),]\nS4 <- S4[!grepl(S4$sample_name, pattern = \"0M\"),]\n\nwrite.csv(S4, \n            file = \"~/Dropbox/INVAR_TAPAS/Tables/S4_families_per_sample_QC.csv\",quote = F,\n            row.names = F)\n\n\n```\n\n# ROC anaysis of GLRT output\n\n```{r ROC analysis - analysis of an individual GLRT file}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[2], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = T) #, SLX_to_skip)\n\ntable(INVAR_score$detection, INVAR_score$data, INVAR_score$overall_filter)\n\n# Comparing ctDNA levels with and without using size\nINVAR_score.GLRT.comparison.old <- reformat.GLRT.comparison(INVAR_score)\n```\n\n```{r calculate ctDNA level}\npath_combined.polished.rds <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), full.names = T, pattern = \"combined.polished.rds\")\nctDNA_level_by_sample <- ctDNA_level_from_polished.df(path_combined.polished.rds[7])\n\nctDNA_level_by_sample.ptspec <- filter(ctDNA_level_by_sample, data == \"ptspec\")\nctDNA_level_by_sample.nonptspec <- filter(ctDNA_level_by_sample, data == \"nonptspec\")\n\n# merging with ctDNA data\nctDNA_level_by_sample_merged <- left_join(ctDNA_level_by_sample, INVAR_score,\n                                          by = c(\"SLX_barcode\", \"pt_mut_belongs_to\", \"data\")) \n\nctDNA_level_by_sample_merged$detection <- factor(ctDNA_level_by_sample_merged$detection, levels = c(\"TRUE\", \"FALSE\"))\n\nggplot(data = ctDNA_level_by_sample_merged, aes(x = total_DP, y = DP))+\n  geom_point()+\n  labs(x = \"Depth from polished df\",\n       y = \"Depth from INVAR score\",\n       title = \"Depth comparison polished df and INVAR scoring\")\n\n# merging short form table with our ctDNA levels as well\nINVAR_score.GLRT.comparison.merged <- left_join(INVAR_score.GLRT.comparison.old, ctDNA_level_by_sample,\n                                                by = c(\"SLX_barcode\", \"pt_mut_belongs_to\", \"data\")) \n\n# plotting INVAR scores for cohort of all pass filters from patient point of view\nggplot(data = filter(ctDNA_level_by_sample_merged, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"), aes(x = patient, y = INVAR_SCORE_plotting))+\n    geom_point(aes(color = detection, shape = data))+\n    labs(x = \"Patient name\",\n         y = \"INVAR score\",\n         title = \"INVAR score by patient\",\n         subtitle = paste(study, setting, \"\\nOnly showing filter: INVAR_SCORE.using_size_TRUE_TRUE_TRUE\\nAdd 1 to INVAR score to plot zeros as well\"))+\n    theme_bw()+\n    theme(axis.text.x = element_text(angle = 90))+\n  scale_y_log10()\nggsave(paste0(plot_dir, \"p12_\", study, \"_\", setting, \".pdf\"), width = 7, height = 8)\n\n# plotting INVAR scores for cohort of all pass filters from panel point of view\nggplot(data = filter(ctDNA_level_by_sample_merged, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"), aes(x = pt_mut_belongs_to, y = INVAR_SCORE_plotting))+\n    geom_point(aes(color = detection, shape = data))+\n  labs(x = \"mutation belongs to patient name\",\n       y = \"INVAR score\",\n       title = \"INVAR score by mutation panel it belongs to\",\n       subtitle = paste(study, setting, \"\\nOnly showing filter: INVAR_SCORE.using_size_TRUE_TRUE_TRUE\\nAdd 1 to INVAR score to plot zeros as well\"))+\n  theme_bw()+\n  theme(axis.text.x = element_text(angle = 90))+\n  scale_y_log10()\nggsave(paste0(plot_dir, \"p14_\", study, \"_\", setting, \".pdf\"), width = 7, height = 8)  \n\n# plotting INVAR scores for cohort against ctDNA level\nggplot(data = filter(ctDNA_level_by_sample_merged, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"), aes(x = INVAR_SCORE_plotting, y = weighted_mean.plotting))+\n  geom_point(aes(color = detection, shape = data))+\n  scale_x_log10()+\n  scale_y_log10()+\n  labs(x = \"INVAR score\",\n       y = \"ctDNA level\",\n       title = \"INVAR score plotted against ctDNA level\",\n       subtitle = paste(study, setting, \"\\nOnly showing filter: INVAR_SCORE.using_size_TRUE_TRUE_TRUE\\nAdd 1 to INVAR score to plot zeros as well\\nset all ctDNA levels < 1e-8 to 1e-8\"))+\n  theme_bw()\nggsave(paste0(plot_dir, \"p42_\", study, \"_\", setting, \".pdf\"), width = 7, height = 8)\n\n# Comparing with and wihtout size against each other\n# ROC curve comparison, using adjusted INVAR variable\nggplot(data = filter(ctDNA_level_by_sample_merged, LOCUS_NOISE.PASS == \"TRUE\"), aes(d = data_code, m = adjusted_INVAR, color = overall_filter)) +\n  geom_roc()+\n  theme_bw()+\n  labs(title = paste(study, setting))\nggsave(paste0(plot_dir, \"p18_\", study, \"_\", setting, \".pdf\"), width = 8, height = 6)\n\n######################## now plotting with reformatted data #######################\n# anything ending .x is using size, anything ending on .y is not using size\n#### can't do this right now because ctDNA value is dodgy\n# ggplot(data = filter(INVAR_score.GLRT.comparison.merged, overall_filter.x == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"), \n#                      aes(x = ctDNA_level.y, y = ctDNA_level.x, color = data))+\n#   geom_point()+\n#   scale_x_log10()+\n#   scale_y_log10()+\n#   theme_bw()+\n#   geom_abline(slope = 1, linetype = \"longdash\")+\n#   facet_wrap( ~ detection_change, labeller = as_labeller(detection_change_names), scales = \"free\")+\n#   labs(x = \"ctDNA level not using size\",\n#        y = \"ctDNA level using size\",\n#        title = \"detection not using size vs detection size\",\n#        subtitle = paste(study, setting, \"\\nDotted line : x=y\\nFiltering for INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"))+\n#   scale_color_discrete(name = \"Cohort\")\n# ggsave(paste0(plot_dir, \"p19_\", study, \"_\", setting, \".pdf\"), width = 8, height = 7)\n\n######################### Continuing only with data using size\nggplot(data = filter(ctDNA_level_by_sample_merged, GLRT_setting == \"INVAR_SCORE.using_size\", LOCUS_NOISE.PASS == \"TRUE\"), aes(x = SLX_barcode, y = total_DP, color = detection))+\n  geom_point()+\n  geom_hline(yintercept = 10000, linetype = \"longdash\")+\n  theme_bw()+\n  scale_y_log10()+\n  scale_colour_discrete(name = \"INVAR\\ndetection\")+\n  labs(x = \"Sample\",\n       y = \"log(10) Depth polished df\",\n       title = \"INVAR detection using size\",\n       subtitle = paste(study, setting, \"\\nnonptspec is plotted by sample\\nspecificity = \", INVAR_score_specificity))+\n  theme(axis.text.x = element_blank())+\n  facet_wrap(overall_filter ~ data, scales = \"free_x\", ncol = 2)\nggsave(paste0(plot_dir, \"p5_\", study, \"_\", setting, \".pdf\"), width = 7, height = 10)\n\nggplot(data = filter(ctDNA_level_by_sample_merged, GLRT_setting == \"INVAR_SCORE.using_size\", LOCUS_NOISE.PASS == \"TRUE\"), aes(x = total_DP, y = adjusted_ctDNA)) +\n  geom_line(aes(x = DP, y = 1/DP), linetype = \"longdash\")+\n  geom_point(aes(color = detection))+\n  scale_x_log10()+\n  scale_y_log10()+\n  theme_bw()+\n  labs( x = \"log(10) Depth polished df\",\n        y = \"log(10) ctDNA level our calc.\",\n        title = paste(study, setting),\n        subtitle = paste0(\"Line: Depth vs 1/Depth\\nspecificity = \", INVAR_score_specificity, \"\\nUsing size\"))+\n  facet_wrap(overall_filter ~ data, ncol = 2)\nggsave(paste0(plot_dir, \"p11_\", study, \"_\", setting, \".pdf\"), width = 10, height = 15)\n\n# following plots not working right now because ctDNA level is not correct\n# ggplot(data = filter(ctDNA_level_by_sample_merged, LOCUS_NOISE.PASS == \"TRUE\"), aes(x = additional_filter, y = ctDNA_level, fill = GLRT_setting))+\n#   geom_boxplot()+\n#   scale_y_log10()+\n#   #facet_wrap(~ data )+\n#   theme_bw()+\n#   labs(x = \"Group\",\n#        y = \"log(10) ctDNA level\",\n#        title = \"Comparison of noise with respect to error reduction\",\n#        subtitle = paste(study, setting, \"\\nfiltering for LOCUS_NOISE.PASS only\"))\n# ggsave(paste0(plot_dir, \"p21_\", study, \"_\", setting, \".pdf\"), width = 15, height = 11)\n# \n# ggplot(data = filter(INVAR_score, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\" | \n#                      overall_filter == \"INVAR_SCORE.no_size_TRUE_TRUE_TRUE\"), aes(x = additional_filter, y = ctDNA_level, fill = GLRT_setting))+\n#   geom_boxplot()+\n#   scale_y_log10()+\n#   theme_bw()+\n#   labs(x = \"Group\",\n#        y = \"log(10) ctDNA level\",\n#        title = \"Comparison of noise with respect to error reduction\",\n#        subtitle = paste(study, setting, \"\\nfiltering for passing all additional filters\"))\n# ggsave(paste0(plot_dir, \"p39_\", study, \"_\", setting, \".pdf\"), width = 7, height = 9)\n# \n# INVAR_score_less10 <- filter(INVAR_score, adjusted_INVAR < 10)\n\n# ggplot(data = filter(INVAR_score_less10, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\" | \n#                      overall_filter == \"INVAR_SCORE.no_size_TRUE_TRUE_TRUE\"), \n#        aes(x = additional_filter, y = INVAR_SCORE_plotting, fill = GLRT_setting))+\n#   geom_boxplot()+\n#   scale_y_log10(limits = c(0.1, 1000))+\n#   #ylim(0,20000)+\n#   theme_bw()+\n#   labs(x = \"Group\",\n#        y = \"log(10) INVAR score\",\n#        title = \"Comparison of noise with respect to error reduction\",\n#        subtitle = paste(study, setting, \"\\nfiltering for passing all additional filters\\nusing INVAR_SCORE_plotting\"))\n# ggsave(paste0(plot_dir, \"p40_\", study, \"_\", setting, \".pdf\"), width = 15, height = 11)\n\n########################## now plotting waterfall plot with our AF\n#plotting_ctDNA_levels(ctDNA_level_by_sample_merged, QC_DP_threshold = 25000)\n\nctDNA_DF <- ctDNA_level_by_sample_merged\nQC_DP_threshold = 25000\n\n  print(\"filtering for overall filter INVAR_SCORE.using_size_TRUE_TRUE_TRUE and ptspec data\")\n  ctDNA_DF_filtered <- filter(ctDNA_DF, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\", data == \"ptspec\")\n  print(\"Generating color sheme for plot, using total_DP column which comes from combined polished data frame\")\n  ctDNA_DF_filtered$coloring <- as.character(ctDNA_DF_filtered$detection)\n  ctDNA_DF_filtered$evaluation <- \"evaluable\"\n  ctDNA_DF_filtered[ctDNA_DF_filtered$total_DP < QC_DP_threshold & ctDNA_DF_filtered$coloring == FALSE, \"evaluation\"] <- \"not evaluable\"\n  \n  ctDNA_DF_filtered <- left_join(ctDNA_DF_filtered, LUCID_pathology, by = \"Patient\")\n  ctDNA_DF_filtered[ctDNA_DF_filtered$adjusted_ctDNA == 0, \"adjusted_ctDNA\"] <- 1e-7\n  \n  ctDNA_DF_filtered$evaluation <- factor(ctDNA_DF_filtered$evaluation, levels = c(\"not evaluable\", \"evaluable\"))\n\n  p43 <- ggplot(data = ctDNA_DF_filtered, aes(x = reorder(pt_mut_belongs_to, adjusted_ctDNA), y = adjusted_ctDNA))+\n    geom_point(aes(color = path_stage_summary, shape = Sample.pathology), size = 3, fill = \"black\") +\n    scale_y_log10(limits = c(5e-8,5e-1),\n                  breaks = c(1e-7, 1e-6, 1e-4, 1e-2),\n                  labels = c(\"ND\", \"1e-06\", \"1e-04\", \"1e-02\"))+\n    labs(x = \"Sample\",\n         y = \"log(10) global ctDNA level\",\n         title = \"Patient ctDNA level by sample\",\n         subtitle = paste(study, setting, \"\\nOnly showing filter: INVAR_SCORE.using_size_TRUE_TRUE_TRUE\\nQC filter = \", QC_DP_threshold))+\n    theme_bw()+\n    theme(axis.text.x = element_blank())+\n    scale_color_manual(name = \"Stage\",\n                       breaks = c(\"IA\", \"IB\", \"II\", \"IIIA\"),\n                       values = c(\"#c2e699\", \"#78c679\", \"#31a354\", \"#006837\"))+\n    scale_shape_manual(name = \"Sample pathology\",\n                         breaks = c(\"Adenocarcinoma\", \"Squamous cell carcinoma\", \"Other\"),\n                         labels = c(\"AC\", \"SCC\", \"Other\"),\n                         values = c(15, 4, 17))+\n    facet_wrap(~evaluation, scales = \"free_x\")\n  \ngt = ggplotGrob(p43)\n\n# From 'dfm', get the number of 'strain' for each 'type'.\n# That is, the number x-breaks in each panel.\nN <- ctDNA_DF_filtered %>% group_by(evaluation) %>% \n     summarise(count = length(unique(pt_mut_belongs_to))) %>% \n     `[[`(2)\n\n# Get the column index in the gt layout corresponding to the panels.\npanelI <- gt$layout$l[grepl(\"panel\", gt$layout$name)]\n\n# Replace the default panel widths with relative heights.\ngt$widths[panelI] <- unit(N, \"null\")\n\n## Draw gt\ngrid.newpage()\ngrid.draw(gt)\nggsave(plot = grid.draw(gt), paste0(plot_dir, \"p43_\", study, \"_\", setting, \".pdf\"), width = 9, height = 7)\n#####################\n\n# For LUCID data:\nLUCID_annotated_detection <- left_join(filter(ctDNA_level_by_sample_merged, data_code == 1, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"), LUCID_pathology, by = \"Patient\")\n\nplotting_help = 1e-8\nggplot(data = LUCID_annotated_detection, aes(x = path_stage_summary, y = (adjusted_ctDNA + plotting_help)))+\n  geom_boxplot()+\n  geom_point()+\n  theme_bw()+\n  #scale_y_log10()+\n  labs(x = \"Pathological stage\",\n       y = \"ctDNA level INVAR\",\n       title = \"Boxplot of ctDNA value by pathological stage\",\n       subtitle = paste0(study, setting))\nggsave(paste0(plot_dir, \"p63_\", study, \"_\", setting, \".pdf\"), width = 9, height = 7)\n\nuse_for_summary <- ctDNA_DF_filtered[ctDNA_DF_filtered$evaluation == \"evaluable\", \"Patient\"]\n\nLUCID_annotated_detection.summary <- as.data.frame(table(filter(LUCID_annotated_detection, patient %in% use_for_summary)$path_stage_summary, filter(LUCID_annotated_detection, patient %in% use_for_summary)$detection))\ncolnames(LUCID_annotated_detection.summary) <- c(\"Stage\", \"Detection\", \"Count\")\nLUCID_annotated_detection.summary <- tidyr::spread(LUCID_annotated_detection.summary, Detection, Count)\ncolnames(LUCID_annotated_detection.summary) <- c(\"Stage\", \"Detection_T\", \"Detection_F\")\nLUCID_annotated_detection.summary$total_cases <- LUCID_annotated_detection.summary$Detection_T + LUCID_annotated_detection.summary$Detection_F\nLUCID_annotated_detection.summary$Detected_fraction <- LUCID_annotated_detection.summary$Detection_T / LUCID_annotated_detection.summary$total_cases\n\nselect(LUCID_annotated_detection.summary, Stage, total_cases)\n\n# total DP in LUCID cohort\nsummary(LUCID_annotated_detection$DP)\n# ctDNA levels in detected patients\nmedian(filter(LUCID_annotated_detection, detection == \"TRUE\")$adjusted_ctDNA)\n# DP in non detected evaluable patients. \nmedian(filter(LUCID_annotated_detection, detection == \"FALSE\", DP > QC_DP_threshold)$DP)\n\nggplot(data = LUCID_annotated_detection.summary, aes(x = Stage, y = Detected_fraction))+\n  geom_bar(stat = \"identity\")+\n  labs(x = \"Pathological Stage\",\n       y = \"Detected fraction\",\n       title = \"LUCID detection of evaluable cases\",\n       subtitle = paste0(\"total detection = \", sum(LUCID_annotated_detection.summary$Detection_T) / sum(LUCID_annotated_detection.summary$total_cases)))+\n  scale_x_discrete(breaks = c(\"IA\", \"IB\", \"II\", \"IIIA\"),\n                   labels = c(\"IA\\nn=5\", \"IB\\nn=4\", \"II\\nn=5\", \"IIIA\\nn=2\"))+\n  theme_bw()\nggsave(paste0(plot_dir, \"p57_\", study, \"_\", setting, \".pdf\"), width = 7, height = 6)\n\n# LUCID_annotated_detection.melt <- select(LUCID_annotated_detection, Patient, detection, Disease.stage.at.Diagnosis, Sample.pathology, Pathological.Stage)\n# LUCID_annotated_detection.melt <- melt(LUCID_annotated_detection.melt, id = c(\"Patient\", \"detection\", \"Sample.pathology\"))\n# \n# LUCID_annotated_detection.summary <- plyr::ddply(LUCID_annotated_detection.melt, c(\"variable\", \"value\", \"Sample.pathology\"), function(x){\n#   detected <- nrow(filter(x, detection == TRUE))\n#   not_detected <- nrow(filter(x, detection == FALSE))\n#   total_reps <- nrow(x)\n#   detected_fraction <- detected/total_reps\n#   data.frame(detected, not_detected, total_reps, detected_fraction)\n# })\n# \n# LUCID_annotated_detection.summary$Sample.pathology <-  gsub(LUCID_annotated_detection.summary$Sample.pathology, pattern = \"Adenocarcinoma\", replacement = \"AC\")\n# LUCID_annotated_detection.summary$Sample.pathology <-  gsub(LUCID_annotated_detection.summary$Sample.pathology, pattern = \"Squamous cell carcinoma\", replacement = \"SCC\")\n# \n# ggplot(data = filter(LUCID_annotated_detection.summary, variable == \"Pathological.Stage\"), aes(x = value, y = detected_fraction, fill = Sample.pathology))+\n#   geom_bar(position = \"dodge\", stat = \"identity\")+\n#   labs(x = \"Stratifier\",\n#        y = \"Detected fraction\",\n#        title = \"LUCID detection\")+\n#   theme_bw()+\n#   #facet_grid(. ~ variable)+\n#   theme(legend.position = \"bottom\")+\n#   scale_fill_discrete(name = \"Subtype\", breaks = c(\"AC\", \"SCC\", \"Other\"), labels = c(\"Adenocarcinoma\", \"Squamous cell carcinoma\", \"Other\"))\n# ggsave(paste0(plot_dir, \"p57_\", study, \"_\", setting, \".pdf\"), width = 9, height = 6)\n```\n\n# Tumour vs plasma\n\n```{r tumour vs plasma AFs}\nfiles.raw <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = \"0.05.combined.polished.rds\", full.names = T)\n\nfiles <- files.raw[grepl(files.raw, pattern = \"f0.9_s2.\")]\n\noutput <- data.frame()\nfor (file in files){\n  print(file)\n  curr <- readRDS(file)\n  \n  # be verbose\n  print(\"file read\")\n  print(colnames(curr))\n  \n  # remove cols\n  if(\"panel_number.x\" %in% colnames(curr)){\n    print(\"removing extra panel cols for AVASTM\")\n    curr <- select(curr, -panel_number.x, -panel_number.y)\n  }\n  \n  curr$study <- gsub(file, pattern = \".*(AVASTM|LUCID|MELR).*\", replacement =\"\\\\1\")\n  output <- rbind(curr[,], output)  \n}\n\noutput_filtered <- output[!grepl(output$sample_name, pattern = \"XP\"), ]\nMELR_remove <- c(\"MR1009\", \"MR1003\", \"MR1002; MR1004; MR1006; MR1010; MR1020; MR1022\")\noutput_filtered <- filter(output_filtered, !(pt_mutation_belongs_to %in% MELR_remove))\n\noutput_filtered <- filter(output_filtered, \n       PASS == TRUE, \n       BOTH_STRANDS == TRUE, \n       CONTAMINATION_RISK.PASS == TRUE, \n       LOCUS_NOISE.PASS == TRUE) \n\noutput_filtered$observed_in_plasma <- output_filtered$AF > 0\n\n# recalculate average to exclude high level samples\naverage <- filter(output_filtered, study == \"MELR\")%>%\n  plyr::ddply(c(\"Patient\", \"SLX_barcode\"), function(x){\n  data.frame(average = weighted.mean(x$AF, x$DP))\n})\n\nMELR_remove <- average[average$average > 1e-2,'SLX_barcode']\noutput_filtered <- filter(output_filtered, !(SLX_barcode %in% MELR_remove))\n\n# supplementary plot\nggplot2::ggplot(data = output_filtered, aes(x = study, y = tumour_AF, fill = observed_in_plasma))+\n    geom_boxplot(outlier.colour = NA, notch = T)+\n    facet_grid(. ~ data)+\n  theme_bw()+\n  labs(x = \"Study\",\n       y = \"Tumour allele fraction\",\n       title = \"Tumour AF of detected vs. non detected loci\",\n       subtitle = \"Split by ptspec and nonptspec\")+\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        panel.grid.major = element_line(colour = alpha(\"black\", 0.1)))+\n  stat_compare_means(method = \"t.test\", \n                     method.args = list(alternative = \"greater\"), \n                     aes(label = paste0(\"p = \", ..p.format..)))\nggsave(paste0(plot_dir, \"p59_tumour_AF_for_observed_non_observed_loci.pdf\"), width = 7, height = 4)\n\n# main plot\noutput_filtered[output_filtered$study == \"MELR\", 'stage'] <- \"advanced\"\noutput_filtered[output_filtered$study != \"MELR\", 'stage'] <- \"early\"\n\noutput_filtered$stage <- factor(output_filtered$stage, levels = c(\"early\", \"advanced\"))\n\np59.2 <- filter(output_filtered, data == \"ptspec\") %>%\n  ggplot2::ggplot(aes(x = study, y = tumour_AF, fill = observed_in_plasma))+\n  geom_boxplot(outlier.colour = NA, notch = T)+\n  facet_grid(. ~ stage, scales = \"free_x\")+\n  theme_bw()+\n  labs(x = \"Study\",\n       y = \"Tumour allele fraction\",\n       title = \"Tumour AF of detected vs. non detected loci\",\n       subtitle = \"Split by ptspec and nonptspec\")+\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        panel.grid.major = element_line(colour = alpha(\"black\", 0.1)))+\n  stat_compare_means(method = \"t.test\", \n                     method.args = list(alternative = \"greater\"), \n                     aes(label = paste0(\"p = \", ..p.format..)))\n\n\ngt = ggplotGrob(p59.2)\n\n# From 'df', get the number of unique x-axis entries for each facet.\n# That is, the number x-breaks in each panel.\nN <- filter(output_filtered, data == \"ptspec\") %>% group_by(stage) %>% \n     summarise(count = length(unique(study))) %>% \n     `[[`(2)\n\n# Get the column index in the gt layout corresponding to the panels -- don't have to change this...\npanelI <- gt$layout$l[grepl(\"panel\", gt$layout$name)]\n\n# Replace the default panel widths with relative heights -- don't change this.\ngt$widths[panelI] <- unit(N, \"null\")\n\n## Draw gt\ngrid.newpage()\ngrid.draw(gt)\nggsave(plot = grid.draw(gt), paste0(plot_dir, \"p59.2_tumour_AF_for_observed_non_observed_loci.pdf\"), width = 6, height = 4)\n```\n\n```{r tumour vs plasma for individual loci}\nfiles.raw <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = \"combined.polished.rds\", full.names = T)\n\ncurr <- readRDS(files.raw[19])\n  \ncurr <- filter(curr, \n       PASS == TRUE, \n       BOTH_STRANDS == TRUE, \n       CONTAMINATION_RISK.PASS == TRUE, \n       LOCUS_NOISE.PASS == TRUE) \n\ncurr$observed_in_plasma <- curr$AF > 0\nmixture <- filter(curr, grepl(\"MIXTURE\", sample_name), data == \"ptspec\")\n\n#mixture$tumour_AF <- round_any(mixture$tumour_AF, 0.01)\nmixture$dilution <- gsub(mixture$sample_name, pattern = \".*_(1.*)x.*\", replacement = \"\\\\1\")\n\ndetected_proportion <- ddply(mixture, c(\"tumour_AF\", \"dilution\"), function(x){\n   nrow_positive <- nrow(filter(x, AF>0))\n   total_rows = nrow(x)\n   proportion <- nrow_positive/total_rows\n   \n   data.frame(nrow_positive = nrow_positive, total_rows, proportion)\n})\n\nstarting_proportion <- filter(detected_proportion, tumour_AF == 0)\ncolnames(starting_proportion)[5] <- \"starting_proportion\"\ndetected_proportion <- left_join(detected_proportion, starting_proportion[,c(2,5)], by = \"dilution\")\n\ndetected_proportion$proportion.adjusted <- detected_proportion$proportion/detected_proportion$starting_proportion\n\n# p61 - detection rate of each tumour AF in plasma\nfilter(detected_proportion) %>%\nggplot( aes(x = tumour_AF, y = proportion, colour = dilution))+\n geom_point(alpha = 0.5)+\n  geom_smooth(method = \"lm\", se =F)+\n  scale_y_log10()+ #breaks = c(0.01, 0.1, 0.5, 1)\n  #facet_grid(dilution ~ ., scales = \"free_y\")+\n  theme_bw()+\n  labs(x = \"Tumour allele fraction\",\n       y = \"Proportion of loci observed in plasma\",\n       title= \"Mixture experiment - proportion of loci observed by tumour AF\")\nggsave(paste0(plot_dir, \"p61_MELR_tumour_AF_detection_rate_in_plasma.pdf\"), width = 5, height = 5)\n\n# calculate slope\nfilter(detected_proportion, proportion.adjusted > 0)%>% \n    group_by(dilution) %>% \n    do({\n      mod = summary(lm(proportion.adjusted ~ tumour_AF, data = .))\n      data.frame(Intercept = coef(mod)[1],\n                 Slope = coef(mod)[2])\n    })\n\n# plot datapoints for one mixture level\nfilter(mixture, AF>0, tumour_AF > 0, tumour_AF < 1)%>%\nggplot( aes(x = tumour_AF, y = AF, colour = dilution))+\n geom_point(alpha = 0.33)+\n  geom_smooth(method = \"lm\", se =F)+\n  scale_y_log10()+ #breaks = c(0.01, 0.1, 0.5, 1)\n  facet_grid(dilution ~ .)+\n  theme_bw()+\n  labs(x = \"Tumour allele fraction\",\n       y = \"Plasma allele fraction\",\n       title= \"Tumour vs. plasma AF in mixture\")\nggsave(paste0(plot_dir, \"p61.2_mixture_experiment_datapoints.pdf\"), width = 5, height = 7)\n\nfilter(mixture, AF>0, tumour_AF > 0, tumour_AF < 1)%>%\nplyr::ddply(\"dilution\", function(x){\n  data.frame(cor = cor(x$tumour_AF, log10(x$AF)))\n  })\n```\n\n```{r tumour vs plasma - MELR individual patients}\nfiles.raw <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = \"combined.polished.rds\", full.names = T)\n\ncurr <- readRDS(files.raw[19])\n  \ncurr <- filter(curr, \n       #PASS == TRUE, \n       #BOTH_STRANDS == TRUE, \n       #CONTAMINATION_RISK.PASS == TRUE, \n       LOCUS_NOISE.PASS == TRUE) \n\nfilter(curr, tumour_AF > 0, grepl(\"MR\", Patient), !grepl(\";\", Patient), AF>0) %>%\nggplot(aes(x =tumour_AF, y = AF, colour = SLX_barcode))+\n  #geom_point(alpha = 0.5)+\n  geom_smooth(method = \"lm\", se = F, alpha = 0.3)+\n  facet_wrap(~Patient)+\n  #scale_y_log10()+\n  #scale_x_log10()+\n  guides(colour = F)+\n   labs(x = \"Tumour allele fraction\",\n        y = \"Plasma allele fraction\",\n        title = \"Tumour vs plasma allele fraction - MELR\")+\n   theme_bw()\n  \nfiltered <- filter(curr, tumour_AF > 0, grepl(\"MR\", Patient), !grepl(\";\", Patient), AF>0)\n\nplyr::ddply(filtered, \"Patient\", function(x){\n  print(cor.test(x$AF, x$tumour_AF))\n})\n\n\nggsave(paste0(plot_dir, \"df\"), width = 5, height = 5)\n\n```\n\n# Heatmap of detection comparison\n\n```{r}\nINVAR_score.filtered <- filter(INVAR_score, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\")\nINVAR_score.filtered$heatmap_plotting <- \"Negative\"\nINVAR_score.filtered[INVAR_score.filtered$detection == \"TRUE\", ][ , \"heatmap_plotting\"] <- paste0(INVAR_score.filtered[INVAR_score.filtered$detection == \"TRUE\", ][ , \"data\"], \"_\", INVAR_score.filtered[INVAR_score.filtered$detection == \"TRUE\", ][ , \"detection\"])\n\nunique(INVAR_score.filtered$heatmap_plotting)\n\ntest <- select(INVAR_score.filtered, patient, heatmap_plotting, pt_mut_belongs_to)\ntest <- tidyr::spread(test, pt_mut_belongs_to, heatmap_plotting)\n\ntest_final <- test[,-1]\nrownames(test_final) <- test[,1]\n\n######## plotting heatmap\ncolours <- c(\"gray87\", \"skyblue\", \"mediumorchid3\")\nrow_color <- dplyr::inner_join(test, INVAR_score.filtered[, c(\"patient\", \"case_or_control\")], by = \"patient\")\nrow_color <- distinct(select(row_color, patient, case_or_control))\n\nheatmap <- Heatmap(test_final,\n                   col = colours,\n                   name = \"Detection\",\n                   row_title = \"Sample\",\n                   column_title = \"Mutation belonging to\", \n                   heatmap_legend_param = list(at = c(\"Negative\", \"nonptspec_TRUE\", \"ptspec_TRUE\"), \n                                               labels = c(\"Negative\", \"False positive\", \"True positive\")),\n                   rect_gp = gpar(col = \"black\"),\n                   split = data.frame(row_color$case_or_control))\n\npdf(paste0(plot_dir, \"p45_\", study, \"_\", setting, \".pdf\"), width = 7, height = 6) \ndraw(heatmap)\ndev.off()\n```\n\n# Error rate comparison\n\n```{r locus error rates plot - show why locus error rate is not sufficient}\nload(\"/Users/wan01/groups/research/nrlab/group/group_folders/TAPAS/output/MELR/locus_error_rates.Rdata\") # object = error_rate.raw\nmedian(error_rate.raw$DP)\n\nfilter(error_rate.raw, LOCUS_NOISE.PASS == TRUE) %>%\n      ggplot2::ggplot(aes(x = background_AF, fill = mut_class))+\n      geom_density(alpha = 0.5)+ #bins = 100, position = \"dodge\"\n      scale_colour_discrete(name = \"Locus noise pass\")+\n      #scale_y_log10()+\n      scale_x_log10(breaks = c(1e-5, 1e-4, 1e-3, 1e-2, 1e-1))+\n      #geom_vline(xintercept = locus_threshold, linetype = \"dashed\")+\n      theme_bw()+\n      labs(x = \"Background allele fraction in controls\",\n           y = \"Frequency\",\n           title = paste(study, setting, \"on-target, nonptspec data\"))\nggsave(paste0(plot_dir, \"p1.2_MELR_f0.9_s5.locus_noise_rates.pdf\"), width = 6, height = 4)\n\n```\n\n```{r Background error rates}\nsource(\"functions.R\")\nfiles <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = \"error_rates\", full.names = T)\nfiles <- files[c(4:8)]\nerror_file <- files[2]\n\nstudy <- gsub(files, pattern = \".*(MELR|AVASTM|LUCID).*\", replacement = \"\\\\1\")\nsetting <- gsub(files, pattern = \".*(f0.9_s[0-9]).*\", replacement = \"\\\\1\")\n\nbackground_error <- get.error_rate_polishing_comparison(error_file, SLX_layout)\n\nif (study == \"MELR\"  & length(colnames(background_error)) == 11){\n  saveRDS(background_error, file = paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/\", study, \".\", setting, \".background_error.rds\"))\n} else if (study == \"LUCID\" & length(colnames(background_error)) == 11){\n  saveRDS(background_error, file = paste0(input_dir, \"LUCID.\", setting, \".background_error.rds\"))\n} else if (study == \"MELR_EXOME\" & length(colnames(background_error)) == 11){\n  saveRDS(background_error, file = paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR_EXOME/\", study, \".\", setting, \".background_error.rds\"))\n} else if (study == \"MELR_URINE\" & length(colnames(background_error)) == 11){\n  saveRDS(background_error, file = paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR_URINE/\", study, \".\", setting, \".background_error.rds\"))\n} else if (study == \"AVASTM\" & length(colnames(background_error)) == 11){\n  saveRDS(background_error, file = paste0(tapas_mount_point, \"group_folders/TAPAS/input/AVASTM/\", study, \".\", setting, \".background_error.rds\"))\n} else {\n  print(\"check your dataframe for the right columns\")\n}\n\n# Loading all parsed error rates\nLUCID_f0.9_s2.background_error <- readRDS(paste0(tapas_mount_point, \"group_folders/TAPAS/input/LUCID/LUCID_KH077/LUCID.f0.9_s2.BQ_20.MQ_40.background_error.rds\"))\nLUCID_f0.6_s2.background_error <- readRDS(paste0(tapas_mount_point, \"group_folders/TAPAS/input/LUCID/LUCID_KH077/LUCID.f0.6_s2.BQ_20.MQ_40.background_error.rds\"))\n#AVASTM_f0.9_s2.background_error <- #readRDS(paste0(tapas_mount_point, \"group_folders/TAPAS/input/LUCID/LUCID_KH077/LUCID.f0.9_s2.BQ_20.MQ_40.background_error.rds\"))\nMELR_f0.9_s2.background_error <- readRDS(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/MELR.f0.9_s2.BQ_20.MQ_40.background_error.rds\"))\nMELR_URINE_f0.9_s2.background_error <- readRDS(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR_URINE/MELR_URINE.f0.9_s2.BQ_20.MQ_40.background_error.rds\"))\nMELR_EXOME_f0.9_s2.background_error <- readRDS(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR_EXOME/MELR_EXOME.f0.9_s2.BQ_20.MQ_40.background_error.rds\"))\n\n# Comparing error rates for LUCID CONNOR settings\nLUCID_error_comparison <- left_join(select(LUCID_f0.9_s2.background_error, - setting),\n                                    select(LUCID_f0.6_s2.background_error, - setting),\n                                    by = c(\"TRINUCLEOTIDE\", \"case_or_control\", \"data\", \"REF\", \"ALT\", \"mut_class\", \"study\"))\n\ncolnames(LUCID_error_comparison) <- c(\"TRINUCLEOTIDE\", \"case_or_control\", \"data\", \"REF\", \"ALT\", \"mut_class\", \"background.mut_sum_f0.9_s2\", \"background.DP_f0.9_s2\", \"background_AF_f0.9_s2\", \"study\", \"background.mut_sum_f0.6_s2\", \"background.DP_f0.6_s2\", \"background_AF_f0.6_s2\" )\n\nLUCID_error_comparison$data <- factor(LUCID_error_comparison$data, levels = c(\"one_strand\", \"polished_only\", \"both_strands\", \"polished.both_strands\"))\n\nggplot(data = LUCID_error_comparison, aes(x = background_AF_f0.6_s2, y = background_AF_f0.9_s2, color = mut_class))+\n  geom_point()+\n  scale_y_log10(limits = c(0.5e-7, 1e-4))+\n  scale_x_log10(limits = c(0.5e-7, 1e-4))+\n  geom_abline(slope = 1, linetype = \"dashed\")+\n  labs(x = \"Error rate CONNOR f0.6 s2\",\n       y = \"Error rate CONNOR f0.9 s2\",\n       title = \"Error rate comparison LUCID\")+\n  facet_wrap( ~ data)+\n  theme_classic()+\n  guides(fill=FALSE) +\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        panel.grid.major = element_line(colour = alpha(\"black\", 0.1)))\nggsave(paste0(plot_dir, \"p10_LUCID_error_comparison.pdf\"), width = 10, height = 9)\n\n# comparing all the studies with the same CONNOR settings against each other\nerror_rates_all_studies <- rbind(LUCID_f0.9_s2.background_error,\n                                 MELR_f0.9_s2.background_error,\n                                 MELR_URINE_f0.9_s2.background_error,\n                                 MELR_EXOME_f0.9_s2.background_error)\n\nggplot(data = filter(error_rates_all_studies, case_or_control == \"case\"), aes(x = mut_class, y = background_AF, fill = study))+\n  geom_boxplot()+\n  scale_y_log10(breaks = c(1e-7, 1e-6, 1e-5, 1e-4))+\n  theme_classic()+\n  facet_grid(data ~ .)+\n  scale_fill_discrete(name = \"Study\")+\n  labs(x= \"Mutation class\",\n       y= \"Background AF\",\n       title= \"Background error comparison between studies\",\n       subtitle = \"All studies are using CONNOR 0.9, family size 2\\nFiltering for cases only\")\nggsave(paste0(plot_dir, \"p25_study_error_comparison.pdf\"), width = 9, height = 6)\n```\n\n```{r Error rates without error-suppression}\nsetwd(\"~/Desktop/TAPAS/\")\nsource(file = \"Rmd/functions.R\", echo = T)\nsource(file = \"Rmd/plots.R\", echo = T)\n##### Get the unfiltered data to plot alongside it\nload(file = \"environments/TAPAS_env9.RData\")\n\nptspec <- blacklist(ptspec_unfiltered)\nnonptspec <- blacklist(nonptspec_unfiltered)\nptspec <- get.12_error_classes(ptspec)\nnonptspec <- get.12_error_classes(nonptspec)\n\nbootstrap_output <- data.frame()\nfor (n in 1:10){\n  print(n)\n  nonptspec.sampled <- nonptspec[sample(1:nrow(nonptspec),nrow(nonptspec), replace = T),]\n  temp <- get.mut_AF_byclass(nonptspec.sampled, strand_bias_threshold = 5)\n  temp$bootstrap <- n\n  bootstrap_output <- rbind(bootstrap_output, temp)\n}\nmut_AF_byclass.unfiltered <- bootstrap_output\nmut_AF_byclass.unfiltered$data <- 'raw'\n\naverage.error_rate <- plyr::ddply(mut_AF_byclass.unfiltered, 'sample_type', function(x){\n  data.frame(error_rate = sum(x$mut_sum)/sum(x$DP))\n})\nsave(mut_AF_byclass.unfiltered, file = paste0(tapas_mount_point, \"group_folders/TAPAS/output/background_error_comparison/non-error-suppressed_error_rates.Rdata\"))\n```\n\n# Family size comparison\n\n```{r}\n################ comparing median depth as well as error rates between the different family size settings #####################\n# use on target prefilter data frame to contain all the loci that got sequencing \n# change which study you are looking for with study parameter\nstudy = \"LUCID\"\ncombined_files <- list.files(path = paste0(tapas_mount_point, \"group_folders/TAPAS/download/\"), pattern = glob2rx(paste0(study, \".f0.9\", \"*on_target.prefilter.Rdata\")))\n\ncombined.pre_filter_files <- data.frame()\n\nfor (i in 1:length(combined_files)) {\n  load(file = paste0(tapas_mount_point, \"group_folders/TAPAS/download/\", combined_files[i]))\n  family_size <- unlist(lapply(strsplit(combined_files[i], \".BQ_20.MQ_40.\"), \"[[\", 1))\n  data_dt.prefilter$setting <- family_size\n  combined.pre_filter_files <- rbind(combined.pre_filter_files, data_dt.prefilter)\n}\n\ncombined.pre_filter_files.baseline <- filter(combined.pre_filter_files, setting == paste0(study, \".f0.9_s1\"))\n\ncombined.pre_filter_merged <- left_join(combined.pre_filter_files, combined.pre_filter_files.baseline[ ,c(\"uniq\", \"DP\")], by = \"uniq\")\ncombined.pre_filter_merged <- distinct(combined.pre_filter_merged)\ntable((is.na(combined.pre_filter_merged$DP.y)), combined.pre_filter_merged$setting)\ncombined.pre_filter_merged.NA <- filter(combined.pre_filter_merged, is.na(DP.y))\n\n###################\n#some of the loci of higher family size don't have a match in family size 1. This is due to a SNP filter applied during the dataprocessing. The locus is mutant in family size 1, gets assigned a non zero 1k_AF and marked as SNP like. In hgiher family sizes due to error suppression, this locus is no longer mutant and does not get a 1k_AF, therefore remains in the df. \n# going forward the prefilter dataframe will return all loci, SNP like and not SNP like to be a better representation of prefiltered data\n##################\n\n# normalise the data to family size 1 and filter out any NA values:\ncombined.pre_filter_merged <- filter(combined.pre_filter_merged, !is.na(DP.y))\n#Â loss of data due to SNP filter\nnrow(combined.pre_filter_merged.NA) / nrow(combined.pre_filter_merged)\ncombined.pre_filter_merged$normalised_DP <- combined.pre_filter_merged$DP.x / combined.pre_filter_merged$DP.y\ncombined.pre_filter_merged$study <- unlist(lapply(strsplit(combined.pre_filter_merged$setting, \".f\"), \"[[\", 1))\ncombined.pre_filter_merged$error_suppression <- paste0(\"f\", unlist(lapply(strsplit(combined.pre_filter_merged$setting, \".f\"), \"[[\", 2)))\n\n# Run the LOD part of thre script to generate an output file wiht the global error rates for a given cohort\n# plotting the data\nggplot(data = combined.pre_filter_merged, aes(x = error_suppression, y = normalised_DP)) +\n  geom_boxplot(outlier.colour = NA)+\n  geom_point(data = filter(output, study == \"LUCID\", consensus_threshold == \"0.9\"), \n             aes(x = error_suppression, y = overall_error_rate*5*10e3, color = \"error rates\"), \n             size = 2)+\n  theme_bw() +\n  labs(x = \"Setting\",\n       y = \"retained fraction\",\n       title = \"Unique depth accross on target loci\",\n       subtitle = paste0(study, \"\\nNormalised to baselien locus depth of given patient\"))+\n  scale_y_continuous(sec.axis = sec_axis(~./5/10e3, name = \"Error rates\"))\nggsave(paste0(plot_dir, \"p22_\", study, \".pdf\"), width = 6, height = 5)\n\n############ comparing error rates ##########################\nfiles <-  list.files(path = paste0(tapas_mount_point, \"group_folders/TAPAS/download/\"), \n                     pattern = glob2rx(paste0(study, \".f0.9\", \"*error_rates.Rdata\")))\n\ncombined_background_error <- data.frame()\n\nfor (f in 1:length(files)) {\n  print(paste0(\"working on file \", f, \" out of \", length(files)))\n  error_file <- paste0(tapas_mount_point, \"group_folders/TAPAS/download/\", files[f])\n  background_error <- calculate.background_error(error_file, SLX_layout)\n  background_error <- add.missing_error_classes(background_error, trinucleotide_depth)\n  background_error <- combine_classes(background_error)\n  background_error$setting <- files[f]\n  combined_background_error <- rbind(combined_background_error, background_error)\n}\n\ncombined_background_error$setting <- unlist(lapply(strsplit(combined_background_error$setting, \".BQ\"), \"[[\", 1))\ncombined_background_error$details <- unlist(lapply(strsplit(combined_background_error$setting, \".f\"), \"[[\", 1))\ncombined_background_error$family <- paste0(\"f\", unlist(lapply(strsplit(combined_background_error$setting, \".f\"), \"[[\", 2)))\n\n# removing exome and AVASTM data --> too sparse, not enough settings run\nggplot(data = filter(combined_background_error, case_or_control == \"case\", details != \"MELR_EXOME\", details != \"AVASTM\"), aes(x = mut_class, y = background_AF, fill = family)) +\n    geom_boxplot(outlier.colour= \"NA\") +\n    scale_y_log10(breaks = c(1e-7, 1e-6, 1e-5, 1e-4, 1e-3))+\n    theme_classic() +\n    labs(x= \"Mutation class\",\n         y= \"Background AF\",\n         title= \"Background error comparison\\nLUCID family data\",\n         subtitle = \"Using only cases\")#+\n    #facet_grid( ~ details)\nggsave(paste0(plot_dir, \"p23_family_error_rates.pdf\"), width = 10, height = 6)\nggsave(paste0(plot_dir, \"p23_MELR_family_error_rates.pdf\"), width = 8, height = 6)\nggsave(paste0(plot_dir, \"p23_LUCID_family_error_rates.pdf\"), width = 8, height = 6)\n\n```\n\n# Size analysis\n\n```{r size profiles by different error suppression settings}\n# Do size comparison for consensus threshold 0.9 of the different family sizes.\nsize_files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), full.names = T, pattern = glob2rx(paste0(\"*f0.9_s2\", \"*BQ_20.MQ_40.size_characterisation.rds\")))\n\nsummary <- size_characterisation(size_files, round = 5, combine_AVASTM = F)\n\n## fragment size per cohort, with different levels of error-suppression\nsummary <- filter(summary, data == \"ptspec\", exome== FALSE, study != \"LUCID.f0.6_s2\", study_name != \"MELR_URINE\")\n\nsummary %>%\nggplot( aes(x = size.round, y = proportion, fill = mut)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Fragment size in bp\",\n       y = \"Proportion\",\n       title = \"Fragment size vs. error-suppression\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14,\n                                  face = \"bold\"),\n        legend.text = element_text(size = 12),\n        legend.title = element_text(size = 12,\n                                    face = \"bold\")) +\n  scale_x_continuous(limits = c(0, 400))+\n  facet_grid(study_name~family_size, scales = \"free_y\")\nggsave(paste0(plot_dir, \"p30_size_comparison.pdf\"), width = 9, height = 6)\n\n## p30.2 for paper\np30.2 <- filter(summary, data == \"ptspec\", exome== FALSE, study != \"LUCID.f0.6_s2\", sample_type != \"urine_DNA_supernatant\")%>%\nggplot( aes(x = size.round, y = proportion, fill = mut)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Fragment size in bp\",\n       y = \"Proportion\",\n       title = \"Fragment size vs. error-suppression\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14,\n                                  face = \"bold\"),\n        legend.text = element_text(size = 12),\n        legend.title = element_text(size = 12,\n                                    face = \"bold\"),\n        legend.position = c(0.15, 0.9)) +\n  scale_x_continuous(limits = c(0, 400))+\n  facet_grid(study~., scales = \"free_y\")+\n  geom_vline(xintercept = c(166, 166*2), linetype = \"dashed\", alpha = 0.5)+\n  annotate(\"text\", x = 210, y = 0.15, label = \"166bp\", alpha = 0.5)+\n  annotate(\"text\", x = 380, y = 0.15, label = \"332bp\", alpha = 0.5)\n#ggsave(paste0(plot_dir, \"p30_size_comparison.pdf\"), width = 9, height = 6)\n\n\n## calculate enrichment level\nsummary <- size_characterisation(size_files, round = 5)\n# identify each study\nsummary$family_size <- gsub(summary$study, pattern = \".*f.*_(s.).*\", replacement = \"\\\\1\")\nsummary$study_name <- gsub(summary$study, pattern = \".*(MELR|LUCID|AVASTM).*\", replacement = \"\\\\1\")\nsummary$study_name <- factor(summary$study_name, levels = c(\"LUCID\", \"AVASTM\", \"MELR\"))\n\nsize.mutant  <- filter(summary, mut == TRUE, exome == FALSE)[,c(\"count\", \"total\", \"size.round\", \"data\", \"case_or_control\", \"sample_type\", \"proportion\", \"family_size\", \"study_name\")]\nsize.wt  <- filter(summary, mut == FALSE, exome == FALSE)[,c(\"count\", \"total\", \"size.round\", \"data\", \"case_or_control\", \"sample_type\", \"proportion\", \"family_size\", \"study_name\")]\nenrichment_ratio <- left_join(size.wt, size.mutant, by = c(\"size.round\", \"data\", \"case_or_control\", \"sample_type\", \"family_size\", \"study_name\"))\n\n# enrichment ratio correction for comparing different sized dataframes\ntotals <- enrichment_ratio[!is.na(enrichment_ratio$proportion.y),] %>%\n  plyr::ddply(c(\"study_name\", \"data\", \"case_or_control\", \"family_size\"), function(x){\n    data.frame(total = sum(x$count.x)) })\n\nenrichment_ratio <- left_join(enrichment_ratio, totals, by = c(\"study_name\", \"data\", \"case_or_control\", \"family_size\"))\nenrichment_ratio$proportion.x <- enrichment_ratio$count.x / enrichment_ratio$total\n\nenrichment_ratio$ratio <- enrichment_ratio$proportion.y/enrichment_ratio$proportion.x\nenrichment_ratio$ratio.log2 <- log2(enrichment_ratio$ratio)\n\nenrichment_ratio$study_name <- factor(enrichment_ratio$study_name, levels = c(\"LUCID\", \"AVASTM\", \"MELR\", \"MELR_URINE\"))\n\np31.2 <- filter(enrichment_ratio, data == \"ptspec\", case_or_control == \"case\", ratio.log2 != \"NA\", sample_type != \"urine_DNA_supernatant\")%>%\nggplot( aes(x = size.round, y = ratio.log2)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Fragment size in bp\",\n       y = \"Enrichment ratio - log2 ratio\",\n       title = \"Enrichment ratio for ctDNA vs. error-suppression\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14,\n                                  face = \"bold\"))+\n  scale_x_continuous(limits = c(0, 400))+\n  #scale_y_log10()+\n  geom_vline(xintercept = c(166, 166*2), linetype = \"dashed\", alpha = 0.5)+\n  facet_grid(study_name~.)+\n  annotate(\"text\", x = 210, y = 5, label = \"166bp\", alpha = 0.5)+\n  annotate(\"text\", x = 380, y = 5, label = \"332bp\", alpha = 0.5)\n#ggsave(paste0(plot_dir, \"p31_enrichment_ratios.pdf\"), width = 9, height = 6)\n\nmultiplot(p30.2, p31.2, cols = 2)\nggsave(plot = multiplot(p30.2, p31.2, cols = 2), paste0(plot_dir, \"p54_enrichment_ratios.pdf\"), width = 9, height = 6)\n\n```\n\n```{r Test similarity of size profiles}\n## how similar are these size profiles between cohorts\nsummary <- filter(summary, data == \"ptspec\", exome== FALSE, study != \"LUCID.f0.6_s2\", sample_type != \"urine_DNA_supernatant\")\n\nplyr::ddply(summary, c(\"study\", \"mut\"), function(x){\n  below_150 <- sum(filter(x, size.round <= 150)$proportion)\n  above_300 <- sum(filter(x, size.round > 300)$proportion)\n  data.frame(below_150, above_300)\n}) \n\nggplot(summary, aes(x = study, y = proportion, fill = mut))+\n  geom_boxplot()\n\n## how similar are these plots? Try linear regression\nenrichment_ratio <- filter(enrichment_ratio, data == \"ptspec\", case_or_control == \"case\", ratio.log2 != \"NA\", sample_type != \"urine_DNA_supernatant\")\n\nenrichment_ratio.LUCID <- filter(enrichment_ratio, study_name == \"LUCID\")[,c(3,14)]\nenrichment_ratio.MELR <- filter(enrichment_ratio, study_name == \"MELR\")[,c(3,14)]\nenrichment_ratio.AVASTM <- filter(enrichment_ratio, study_name == \"AVASTM\")[,c(3,14)]\n\nmerged <- left_join(enrichment_ratio.MELR, enrichment_ratio.LUCID, by = \"size.round\")\nmerged <- left_join(merged, enrichment_ratio.AVASTM, by = \"size.round\")\n\ncolnames(merged)[2:4] <- c(\"ratio.MELR\", \"ratio.LUCID\", \"ratio.AVASTM\")\nmerged[is.na(merged$ratio.LUCID),'ratio.LUCID'] <- 0\nmerged[is.na(merged$ratio.AVASTM),'ratio.AVASTM'] <- 0\n\ncor.test(merged$ratio.MELR, merged$ratio.LUCID)\ncor.test(merged$ratio.AVASTM, merged$ratio.LUCID)\ncor.test(merged$ratio.AVASTM, merged$ratio.MELR)\n\nggplot(merged, aes(x = log2(ratio.AVASTM), y = log2(ratio.LUCID), colour = \"AVASTM vs. LUCID\"))+\n  geom_point(alpha = 0.75)+\n  #scale_y_log10()+\n  #scale_x_log10()+\n  geom_abline(slope = 1)+\n # theme(legend.position = c(0, 2))+\n  geom_point(data = merged, aes(x = log2(ratio.AVASTM), y = log2(ratio.MELR), colour = \"AVASTM vs. MELR\"), alpha = 0.5)+\n  geom_point(data = merged, aes(x = log2(ratio.MELR), y = log2(ratio.LUCID), colour = \"LUCID vs. MELR\"), alpha = 0.5)+\n  theme_bw()+\n  labs(x = \"Log2 ratio cohort 1\",\n       y = \"Log2 ratio cohort 2\",\n       title= \"Comparison of log2 enrichment ratios between cohorts\")\nggsave(paste0(plot_dir, \"p71_enrichment_ratios.comparison_across_cohorts.pdf\"), width = 6, height = 4)\n\n```\n\n```{r Supplementary - plot effects of different level of smoothing}\nfile <- paste0(tapas_mount_point, \"group_folders/TAPAS/input/SIZE_PROBABILITIES/AVASTM+LUCID.f0.9_s2.BQ_20.MQ_40.size_characterisation.rds\")\n\nplot_effects_of_different_smooths <- function(file, smooth){\n  size_characterisation <- readRDS(file)\n  \n   ggplot2::ggplot(size_characterisation, aes(x = length.round, y = proportion, colour = mut))+\n    geom_point()\n  \n  min_length <- 0#min(filter(size_characterisation, mut == TRUE)$length.round)\n  max_length <- 400#max(filter(size_characterisation, mut == TRUE)$length.round)\n  \n  ## from detection_functions \n  source(\"~/tapas_pipeline/R/detection_functions.R\")\n  size.combined <- size_characterisation\n  \n  ## read length probabilites for mutant reads\n  output <- data.frame()\n  \n  for (boolean in c(TRUE, FALSE)){\n    print(\"generating read length probabilities\")\n    print(boolean)\n    fragment_length <- size.combined$length.round[size.combined$mut == boolean]\n    counts <- size.combined$count[size.combined$mut == boolean]\n    \n    for (smooth in seq(0.1, 1, by = 0.1)){\n    print(smooth)\n    bw_adjust = smooth\n    \n    probs_mut <- estimate_real_length_probability(fragment_length, \n                                                  counts, \n                                                  min_length = min_length, \n                                                  max_length = max_length,\n                                                  bw_adjust = as.numeric(smooth))\n    probs_mut$smooth <- smooth\n    probs_mut$mutant <- boolean\n    \n    output <- rbind(probs_mut, output)\n    }\n    \n  }\n  \n  output$smooth <- factor(output$smooth)\n  #output <- filter(output, mutant == TRUE | mutant == F & smooth == 0.1 )\n  \n  ggplot2::ggplot(output, aes(x = fragment_length, y = probability, colour = mutant))+ #alpha = smooth, \n    geom_line(stat = \"identity\")+\n          labs(x = \"Fragment size in bp\",\n               y = \"Probability\",\n               title = \"Size profile following smoothing\",\n               subtitle = paste(\"Smooth =\", smooth)) +\n          theme_classic() +\n          theme(axis.text = element_text(size = 12),\n                axis.title = element_text(size = 14,\n                                          face = \"bold\"),\n                legend.text = element_text(size = 12),\n                legend.title = element_text(size = 12,\n                                            face = \"bold\")) +\n          scale_x_continuous(limits = c(0, 400))+\n    facet_grid(smooth ~ .)\n  ggsave(paste0(plot_dir, \"p76_different_smoothing_AVASTM_LUCID.pdf\"), width = 5, height = 8)\n\n}\n\n\n\n```\n\n```{r Plot sizes per sample}\nsize_files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/SIZE_PROBABILITIES\"), full.names = T, pattern = \"raw\")[1]\n\ncurr <- readRDS(size_files)\nsize.ptspec <- filter(curr, data == \"ptspec\")\n\naverage_size <- plyr::ddply(size.ptspec, c(\"sample_name\", \"mutant\", \"SLX_barcode\"), function(x){\n  print(unique(x$sample_name))\n  # stretch df\n  x.stretch <- x[rep(seq(1:nrow(x)), x$total), ]\n  #data.frame(mean_size = weighted.mean(x$size, x$total))\n  data.frame(median = median(x.stretch$size))\n})\n\naverage_size$patient <- gsub(average_size$sample_name, pattern = \".*01-(...).*\", replacement = \"MR1\\\\1\")\naverage_size.nonmixture <- average_size[!grepl(average_size$patient, pattern = \"_\"),]\ncolnames(average_size.nonmixture)[4] <- \"Patient\"\n\n# plot p77 - fragment size per sample\nggplot(average_size.nonmixture, aes(x = Patient, y= median, colour = mutant))+\n  geom_point(alpha = 0.7)+\n  labs(x = \"Patient\",\n       y = \"Median fragment size\",\n       title= \"Median fragment size by sample\",\n       subtitle = \"Split by mutant and wild type\")+\n  theme_bw()+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))\nggsave(paste0(plot_dir, \"p77_fragment_size_per_sample.pdf\"), width = 5, height = 4)\n\naverage_size.nonmixture$Timepoint <- gsub(average_size.nonmixture$sample_name, pattern = \".*T(.+)_.*\", replacement = \"\\\\1\")\ncolnames(average_size.nonmixture)[4] <- \"Patient\"\n\nwrite.csv(average_size.nonmixture, file = \"/Users/wan01/groups/research/nrlab/group/group_folders/TAPAS/INVAR_EXPT/INV031/INV031_median_mutant_size.csv\", quote = F, row.names = F)\n\n# get tumour volume information\ntumour_volume <- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/tumour_volume.csv\"))\ncolnames(tumour_volume)[1] <- \"Patient\"\ntumour_volume$Timepoint <- as.character(tumour_volume$Timepoint)\n\n# INV031 - tumour vol vs mut size\nleft_join(average_size.nonmixture, tumour_volume[,c(1,3,5)], by = c(\"Patient\", \"Timepoint\")) %>%\n  filter(mutant == TRUE) %>%\n  ggplot(aes(x = volume_ml, y = median, colour = Patient))+\n  geom_point()+\n  #geom_smooth(method = \"lm\")+\n  scale_x_log10()\n  \n```\n\n# Exome ctDNA levels quantification\n\n```{r Comparison of exomes and capture}\nsetting <- \"f0.9_s2.BQ_20.MQ_40\"\n\n# get exome invar scores \nINVAR_score.path <- paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT/MELR_EXOME.f0.9_s2.BQ_20.MQ_40.INVAR_scores.txt\")\nMELR_INVAR_score <- get.INVAR_score(INVAR_score.path, \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = F, downsampled = F)\n\nMELR_INVAR_score <- filter(MELR_INVAR_score, Study != \"AVASTM\")\nMELR_INVAR_score$Study <- \"MELR_EXOME\"\n\n# get custom capture invar scores\nINVAR_score.path <- paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT/MELR.f0.9_s2.BQ_20.MQ_40.INVAR_scores.txt\")\nINVAR_score <- get.INVAR_score(INVAR_score.path, \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = F, downsampled = F)\nINVAR_score$Study <- \"MELR\"\n\n\nMELR_INVAR_score <- left_join(MELR_INVAR_score, INVAR_score, by = c(\"Patient\", \"Timepoint\", \"overall_filter\", \"data\", \"pt_mut_belongs_to\", \"GLRT_setting\", \"patient\", \"POLISH.PASS\", \"BOTH_STRANDS.PASS\", \"LOCUS_NOISE.PASS\", \"case_or_control\", \"data_code\", \"sample_type\"))\n# .x is exome, .y is panel#\n\n# Exclude dilution series samples\nMELR_INVAR_score <- MELR_INVAR_score[!grepl(\"JXP0098\", MELR_INVAR_score[[\"sample_name.y\"]]), ]\n\nMELR_INVAR_score <- filter(MELR_INVAR_score, data == \"ptspec\" & overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\") \n\nMELR_INVAR_score[!duplicated(MELR_INVAR_score$ctDNA_level.x),] %>%\nggplot(aes(x = adjusted_ctDNA.x, y = adjusted_ctDNA.y, color = detection.x))+\n  geom_point()+\n  geom_abline(slope = 1, linetype = \"longdash\")+\n  labs(x = \"ctDNA fraction - exome\",\n       y = \"ctDNA fraction - individualised capture\",\n       title= \"Comparison of ctDNA levels between MELR custom capture and exome\",\n       subtitle = \"Colored by exome detection\\nAll panel samples were detectable\\naxis are log(10)\")+\n  scale_color_discrete(name = \"Exome detection\")+\n  theme_bw()+\n  scale_x_log10(limits = c(1e-5, 1))+\n  scale_y_log10(limits = c(1e-5, 1))\nggsave(paste0(plot_dir, \"p32_MELR_panel_exome.pdf\"), width = 5, height = 4)\n\nggplot(data = filter(MELR_INVAR_score, data == \"ptspec\" & overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\"),\n       aes(x = INVAR_SCORE.x, y = INVAR_SCORE.y, color = detection.x))+\n  geom_point()+\n  scale_color_discrete(name = \"Exome detection\")+\n  geom_abline(slope = 1, linetype = \"longdash\")+\n  geom_hline(yintercept = 19.4748728252016, color = \"hotpink\")+\n  geom_vline(xintercept = 7.55575792035961, color = \"hotpink\")+\n  theme_bw()+\n  scale_x_log10()+\n  scale_y_log10()+\n  labs(x = \"INVAR score exome\",\n       y = \"INVAR score panel\",\n       title= \"Comparison of INVAR scores between MELR custom capture and exome\",\n       subtitle = \"Colored by exome detection\\nAll panel samples were detectable\\nLines indicate detection thresholds\\naxis are log(10)\")\nggsave(paste0(plot_dir, \"p33_MELR_panel_exome.pdf\"), width = 8, height = 8)\n\n######## Heatmap of detection comparison ; .x is exome, .y is panel\n\n# some of the panel samples were run twice at the same timepoint\nMELR_INVAR_score.filtered <- filter(distinct(MELR_INVAR_score), overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\", pt_mut_belongs_to != \"MR1003\")\nMELR_INVAR_score.filtered$Timepoint <- str_pad(MELR_INVAR_score.filtered$Timepoint, 2, pad = \"0\")\nMELR_INVAR_score.filtered$combined_detection <- paste0(MELR_INVAR_score.filtered$detection.x, \"_\", MELR_INVAR_score.filtered$detection.y)\nMELR_INVAR_score.filtered$uniq_name <- paste0(MELR_INVAR_score.filtered$Patient,\"_\" , MELR_INVAR_score.filtered$Timepoint)\n\nMELR_INVAR_score.filtered.selected <- select(MELR_INVAR_score.filtered, uniq_name, pt_mut_belongs_to, combined_detection)\n# remove colums where replicates agree with each other goes from 342 to 190\nMELR_INVAR_score.filtered.selected <- distinct(MELR_INVAR_score.filtered.selected)\nMELR_INVAR_score.filtered.selected <- plyr::ddply(MELR_INVAR_score.filtered.selected, c(\"uniq_name\", \"pt_mut_belongs_to\"), function(x){\n  id <- mutate(x, id=1:n())\n  data.frame(id)\n})\n\n# remove anything with ID > 1 for now, will later subsample the datframe somehow\nnrow(filter(MELR_INVAR_score.filtered.selected, id > 1)) # lose another 10 samples\n# plyr::ddply(MELR_INVAR_score.filtered.selected, \"uniq_name\", function(x){\n#   \n#   if(nrow(x) > 1){\n#     print(\"downsampling\")\n#      # for each sample, randomly sample either rep 1 or rep2\n#     x.downsampled <- filter(x, id == sample(2, 1))\n#   } else{\n#     data.frame(x)\n#   }\n# })\nMELR_INVAR_score.filtered.selected <- filter(MELR_INVAR_score.filtered.selected, id == 1)\n\nMELR_INVAR_score.filtered.selected <- select(MELR_INVAR_score.filtered.selected, -id)\nMELR_INVAR_score.filtered.selected <- tidyr::spread(MELR_INVAR_score.filtered.selected, pt_mut_belongs_to, combined_detection)\n\nMELR_INVAR_score.filtered.selected.final <- MELR_INVAR_score.filtered.selected[,-1]\nrownames(MELR_INVAR_score.filtered.selected.final) <- MELR_INVAR_score.filtered.selected[,1]\n\n######## plotting heatmap\ncolours <- c(\"whitesmoke\", \"skyblue\", \"skyblue4\", \"mediumorchid3\")\nrow_split <- dplyr::inner_join(MELR_INVAR_score.filtered.selected, MELR_INVAR_score.filtered[, c(\"uniq_name\", \"Patient\")], by = \"uniq_name\")\nrow_split <- distinct(select(row_split, uniq_name, Patient))\n\nheatmap <- Heatmap(MELR_INVAR_score.filtered.selected.final,\n                   col = colours,\n                   name = \"Detection\",\n                   row_title = \"Sample\",\n                   column_title = \"Mutation belonging to\", \n                   heatmap_legend_param = list(at = c(\"TRUE_TRUE\", \"FALSE_FALSE\", \"TRUE_FALSE\", \"FALSE_TRUE\"),\n                                               labels = c(\"panel&exome\", \"Neither\", \"exome only\", \"panel only\")),\n                   rect_gp = gpar(col = \"black\"),\n                   split = data.frame(row_split$Patient),\n                   gap = unit(2, \"mm\"),\n                   row_title_gp = gpar(alpha = 0))\n\npdf(paste0(plot_dir, \"p46_exome_panel_comparison.pdf\"), width = 7, height = 6) \ndraw(heatmap)\ndev.off()\n```\n\n\n```{r INV007 - quantify lowest levels of ctDNA detected using exome sequencing}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[3], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = F, downsampled = T)\n\nINVAR_score$pt_timepoint <- paste0(INVAR_score$Patient, \"_T\", INVAR_score$Timepoint) \nINVAR_score$detection <- factor(INVAR_score$detection, levels = c(\"TRUE\", \"FALSE\"))\n\nfilter(INVAR_score, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\", data == \"ptspec\") %>%\nggplot(aes(x = reorder(pt_timepoint, adjusted_ctDNA), y = adjusted_ctDNA))+\n  geom_point(aes(color = detection), size = 3) + #, shape = DP > 10000\n  #geom_point(aes(y = adjusted_ctDNA, fill = \"INVAR score ctDNA\"), shape = 4, size = 3) +\n  scale_y_log10(lim = c(1e-5, 1))+\n  labs(x = \"sample\",\n       y = \"log(10) ctDNA level\",\n       title = \"Patient ctDNA level by sample\",\n       subtitle = paste(study, setting, \"\\nOnly showing filter: INVAR_SCORE.using_size_TRUE_TRUE_TRUE\\nset all ctDNA levels < 1e-8 to 1e-8\"))+\n  theme_bw()+\n  theme(axis.text.x = element_text(angle = 45,  hjust = 1))\n\nstudy <- \"MELR_EXOME\"\nsetting <- \"f0.9_s2\"\n\nggsave(paste0(plot_dir, \"p43_\", study, \"_\", setting, \".pdf\"), width = 9, height = 7)\n\n```\n\n# Plot detection; families vs. AF; extrapolate sensitivity needed\n\n```{r AVASTM}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[1], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = F, downsampled = T)\n\nINVAR_score$pt_timepoint <- paste0(INVAR_score$Patient, \"_\", INVAR_score$Timepoint) \nINVAR_score$detection <- factor(INVAR_score$detection, levels = c(\"TRUE\", \"FALSE\"))\n\nstudy <- \"AVASTM\"\nsetting <- \"f0.9_s2\"\n\nplotting_ctDNA_levels(filter(INVAR_score, Timepoint == \"0M\"), QC_DP_threshold = 20000)\nAVASTM_detection <- INVAR_score\n\n# detection at 0M\nAVASTM_detection.0M <- filter(AVASTM_detection, \n                              Timepoint == \"0M\", \n                              overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\")\n\ntable(AVASTM_detection.0M$detection) # 23% at 0M\n\n# detection at 3M\nAVASTM_detection.3M <- filter(AVASTM_detection, Timepoint == \"3M\", \n                              overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\")\n\nAVASTM_detection.3M$detection <- factor(AVASTM_detection.3M$detection)\nAVASTM_detection.3M <- AVASTM_detection.3M[order(-AVASTM_detection.3M$detection),]\nAVASTM_detection.3M <- AVASTM_detection.3M[!duplicated(AVASTM_detection.3M$Patient),] \ntable(AVASTM_detection.3M$detection) #37%\n\n# use no size ctDNA level for AM691\n#AVASTM_detection.3M[AVASTM_detection.3M$Patient == \"AM691\",'adjusted_ctDNA'] <- filter(INVAR_score, overall_filter == \"INVAR_SCORE.no_size_TRUE_TRUE_TRUE\", data == \"ptspec\", Patient == \"AM691\")$adjusted_ctDNA\n\n## total N patients\nlength(unique(c(AVASTM_detection.0M$patient, AVASTM_detection.3M$patient)))\n\n# 0M vs 3M ctDNA\ncombined <- rbind(AVASTM_detection.3M[,c(26,27,29,3,30)], AVASTM_detection.0M[,c(26,27,29,3,30)])\n\ncombined$detection <- factor(combined$detection, levels = c( FALSE, TRUE))\n\nfilter(combined) %>%\nggplot( aes(x = Timepoint, y = adjusted_ctDNA, group = Patient))+\n  geom_line()+\n  geom_point(aes(colour = detection))+\n  scale_y_log10()+\n  labs(x = \"Time point\",\n       y = \"ctDNA fraction\",\n       title = \"ctDNA level box plot by time point\",\n       subtitle = \"AVASTM; f0.9_s2\")+\n  theme_classic()\nggsave(paste0(plot_dir, \"p70_AVASTM_ctDNA_over_time.pdf\"), width = 5, height = 4)\n\n\nggplot(combined, aes(x = DP, y = adjusted_ctDNA, colour = detection))+\n  geom_point()+\n  #geom_smooth(method = \"lm\", se = F)+\n  scale_y_log10(limits = c(1e-6, 1e-1))+\n  scale_x_log10()+\n  geom_line(aes(x = DP, y = 1/DP), colour = \"black\", linetype = \"dashed\")+\n  labs(x = \"Unique families\",\n       y = \"ctDNA fraction\",\n       title = \"ctDNA level by total DP\",\n       subtitle = \"LUCID; f0.9_s2\")+\n  theme_classic()+\n  facet_grid(Timepoint~ .)\nggsave(paste0(plot_dir, \"p68_families_vs_ctDNA_fraction.AVASTM..pdf\"), width = 5, height = 4)\n\ncombined[combined$adjusted_ctDNA == 0, 'adjusted_ctDNA'] <-  1/combined[combined$adjusted_ctDNA == 0, 'DP']\n\nAVASTM_3M <- filter(combined, Timepoint == \"3M\")\n\nAVASTM_3M <- AVASTM_3M[order(AVASTM_3M$adjusted_ctDNA),]\nAVASTM_3M$pt_index <- seq(1,nrow(AVASTM_3M))\n\nggplot(AVASTM_3M, aes(x = detection, y = 1/adjusted_ctDNA))+\n  geom_boxplot()+\n  geom_point()+\n  scale_y_log10(limits = c(0.5e2, 1e6), breaks = c(1e3,1e4,1e5,1e6))+\n  labs(x = \"Detection\",\n       y = \"Minimum families needed to detect\",\n       title = \"Minimum number of molecules to detect samples\",\n       subtitle = \"Non-detected samples - families set as total # families (minimum estimate)\")+\n  theme_classic()\n  ggsave(paste0(plot_dir, \"p69_N_molecules_to_detect.AVASTM.pdf\"), width = 4, height = 4)\n\n  \ndetected_proportion_by_threshold(AVASTM_3M)\n\n\n```\n\n```{r threshold varying for AVASTM}\n# how does varying detection threshold affect detection %\ncombined_detection_rates <- detected_proportion_by_threshold(AVASTM_detection.3M, study = \"AVASTM\", setting = \"f0.9_s2\")\n```\n\n```{r LUCID}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[2], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = T) #, SLX_to_skip)\n\n#save(INVAR_score, file = \"~/Desktop/JXPT/JXP0290/LUCID.INVAR_SCORE.180411.Rdata\")\nload(\"~/Desktop/JXPT/JXP0290/LUCID.INVAR_SCORE.180411.Rdata\")\nLUCID_ptspec <- filter(INVAR_score, grepl(\"using\", GLRT_setting), data == \"ptspec\")\noutput <- detected_proportion_by_threshold(LUCID_ptspec, study = \"LUCID\")\n\n## plot histogram of distributions of AFs\nAF_distribution <- rbind(filter(AVASTM_detection.3M, detection == TRUE)[,c(\"Study\", \"adjusted_ctDNA\")], filter(LUCID_ptspec, detection == TRUE)[,c(\"Study\", \"adjusted_ctDNA\")])\nAF_distribution[AF_distribution$Study == \"AVASTM\", 'cohort'] <- \"Post-surgery\\nmelanoma\"\nAF_distribution[AF_distribution$Study == \"LUCID\", 'cohort'] <- \"Early-stage\\nlung\"\n\nggplot(AF_distribution, aes(x = adjusted_ctDNA))+\n  geom_density()+\n  scale_x_log10(limits = c(1e-7, 1))+\n  labs(x = \"ctDNA level\",\n       y = \"Density\",\n       title = \"Distribution of ctDNA levels of detected samples\")+\n  theme_classic()+\n  facet_wrap(~cohort, scales = \"free_y\")+\n  scale_y_continuous(limits=c(0,0.42))\nggsave(paste0(plot_dir, \"p64_ctDNA_distribution_of_detected_samples.pdf\"), width = 6, height = 4)\n\n## explore AFs\nLUCID_ptspec.short <- LUCID_ptspec[,c(\"Study\", \"adjusted_ctDNA\", \"DP\", \"detection\")]\n\nLUCID_ptspec.short[LUCID_ptspec.short$adjusted_ctDNA == 0 , 'adjusted_ctDNA'] <- 1/LUCID_ptspec.short[LUCID_ptspec.short$adjusted_ctDNA == 0 , 'DP']\n\nggplot(LUCID_ptspec.short, aes(x = DP, y = adjusted_ctDNA, colour = detection))+\n  geom_point()+\n  #geom_smooth(method = \"lm\", se = F)+\n  scale_y_log10(limits = c(1e-6, 1e-1))+\n  scale_x_log10()+\n  geom_line(aes(x = DP, y = 1/DP), colour = \"black\", linetype = \"dashed\")+\n  labs(x = \"Unique families\",\n       y = \"ctDNA fraction\",\n       title = \"ctDNA level by total DP\",\n       subtitle = \"LUCID; f0.9_s2\")+\n  theme_classic()\nggsave(paste0(plot_dir, \"p68_families_vs_ctDNA_fraction.pdf\"), width = 5, height = 4)\n\nfilter(LUCID_ptspec.short, (detection == TRUE) | (detection == F & DP >5000)) %>%\nggplot(aes(x =log10(adjusted_ctDNA), colour = detection))+\n  geom_density()\n\ndetected_proportion_by_threshold(LUCID_ptspec.short, study = \"LUCID\", setting = \"f0.9_s2\")\n\n## testing assessment of detection with different levels of sensitivity\n# assume ctDNA levels are just below 1/#molecules (high ctDNA case)\noutput <- data.frame()\nfor(x in c(seq(0,10)*1e4)){\n    curr<- filter(LUCID_ptspec.short, DP > x)\n    \n    detected_proportion <- data.frame(threshold = x, proportion_detected = nrow(filter(curr, detection == TRUE))/nrow(curr))\n    \n    output <- rbind(detected_proportion, output)\n}\n\nggplot(output, aes(x = threshold, y = proportion_detected))+\n          geom_point()+\n          geom_smooth(method = \"lm\")+\n          theme_bw()\n          #scale_y_continuous(limits = c(0,1.1))\n\nsummary(lm(proportion_detected ~ log10(threshold) , data = output))\n```\n\n# Mixture plotting\n\n```{r Plot mixtures}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[15], SLX_layout, adjust = T, outlier_suppression = 0.05, filter.pattern = \"TRUE_TRUE_TRUE\", CONTAMINATION_RISK_THRESHOLD = 0.01)\n\nmixture <- filter(INVAR_score, grepl(\"_\", patient), !grepl(\"5ng\", Timepoint))\nmixture <- mixture[,c(17,25,27,28)] # change this for names of cols\n\nmixture.downsampled <- parse_mixture_INVAR_scores(mixture.downsampled)\n\nggplot(mixture, aes(x = expected_AF, y = adjusted_ctDNA, colour = detection))+\n  geom_jitter(height = 0, width = 0.05, alpha = 0.9)+\n  scale_y_log10(limits = c(1e-7, 1))+\n  scale_x_log10(limits = c(1e-7, 1))+\n  geom_abline(slope = 1, linetype = \"dashed\")+\n  theme_bw()+\n  labs(x = \"Expected allele fraction\",\n       y = \"Observed allele fraction\",\n       title= \"MELR Mixture experiment\",\n       subtitle = \"Coloured by detection T/F; p_mle ctDNA levels used\")+\n  facet_grid(. ~ overall_filter)\nggsave(paste0(plot_dir, \"p60_MELR_mixture_experiment.pdf\"), width = 7, height = 4)\n\n```\n\n```{r Analyse downsampled mixture}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/INVAR_EXPT/INV018_JXP0289\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[1], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               CONTAMINATION_RISK_THRESHOLD = 0.01, \n                               downsample = T,\n                               skip_contamination_reassessment = F )\n\nmixture.downsampled <- filter(INVAR_score, grepl(\"_\", patient), !grepl(\"5ng\", Timepoint))\nmixture.downsampled <- mixture.downsampled[,c(\"n_mutations\", \"overall_filter\", \"Timepoint\", \"adjusted_INVAR\", \"adjusted_ctDNA\",\"detection\", \"mutant_present\", \"INVAR_SCORE\", \"mut_sum\", \"DP\", \"SLX_barcode\")]\nmixture.downsampled$mut_sum <- as.numeric(mixture.downsampled$mut_sum)\nmixture.downsampled$DP <- as.numeric(mixture.downsampled$DP)\n\nmixture.downsampled <- parse_mixture_INVAR_scores(mixture.downsampled)\nmixture.downsampled$n_mutations <- factor(mixture.downsampled$n_mutations, levels = c(\"100\", \"500\", \"1000\", \"2000\"))\n\nfilter(mixture.downsampled, grepl(\"no\", overall_filter))%>%\nggplot(aes(x = expected_AF, y = adjusted_ctDNA, colour = detection))+\n  geom_jitter(height = 0, width = 0.05, alpha = 0.9)+\n  scale_y_log10(limits = c(1e-7, 1))+\n  scale_x_log10(limits = c(1e-7, 1))+\n  geom_abline(slope = 1, linetype = \"dashed\")+\n  theme_bw()+\n  labs(x = \"Expected allele fraction\",\n       y = \"Observed allele fraction\",\n       title= \"MELR Mixture experiment\",\n       subtitle = \"Coloured by detection T/F; p_mle ctDNA levels used\")+\n  facet_grid(n_mutations ~ .)\nggsave(paste0(plot_dir, \"p60.2_MELR_mixture_experiment.top_N_mutations.pdf\"), width = 5, height = 6)\n\n```\n\n# MELR time courses - individual mutations\n\n```{r Heatmap over time - individual mutaitons}\nfiles <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/download\"), pattern = glob2rx(paste0(\"*.f0.9_s2\", \"*combined.polished.rds\")), full.names = T)\nfiles <- files[9]\n\ncurr <- readRDS(files)\n\ncurr <- filter(curr, LOCUS_NOISE.PASS == TRUE, BOTH_STRANDS == TRUE, PASS == TRUE, data == \"ptspec\", !grepl(\"x\", sample_name))\n\ncurr$Timepoint <- as.numeric(gsub(curr$sample_name, pattern = \".*_T([0-9]+)_.*\", replacement = \"\\\\1\"))\n\n# only keep mutations that are present in every time point\nmutations_per_sample <- plyr::ddply(curr, c(\"Patient\", \"uniq_pos\"), function(x){\n  data.frame(entries = nrow(x))\n})\n\nmutations_per_sample.to_keep <- plyr::ddply(mutations_per_sample, \"Patient\", function(x){\n  x.new <- filter(x, entries == max(x$entries))\n  data.frame(x.new)\n})\n\ncurr <- curr[curr$uniq_pos %in% mutations_per_sample.to_keep$uniq_pos ,]\n\ncurr.average <- curr %>% plyr::ddply(c(\"Patient\", \"Timepoint\", \"uniq_pos\"), function(x){\n    data.frame(AF = weighted.mean(x$AF, x$DP))}) \n\n\n\nggplot(curr.average, aes(x = Timepoint, y = AF, group = uniq_pos))+\n  geom_line(alpha = 0.1)+\n  #scale_y_log10()+\n  facet_grid(Patient ~ .)\n\n\n\n```\n\n```{r Heatmaps of individual mutations}\nfilter(curr, Patient == \"MR1002\") %>%\n  ggplot(aes(x = sample_name, y = uniq_pos, fill = AF))+\n  geom_tile()\n\n\n```\n\n# Heatmap of MELR detection as time course\n```{r}\nINVAR_score.path <- paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT/MELR.f0.9_s2.BQ_20.MQ_40.INVAR_scores.txt\")\nINVAR_score <- get.INVAR_score(INVAR_score.path, SLX_layout)\nINVAR_score$Study <- \"MELR\"\n\n#######################\nINVAR_score.filtered <- filter(INVAR_score, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\", pt_mut_belongs_to != \"MR1003\", pt_mut_belongs_to != \"MR1009\")\nINVAR_score.filtered$Timepoint <- str_pad(INVAR_score.filtered$Timepoint, 2, pad = \"0\")\nINVAR_score.filtered$uniq_name <- paste0(INVAR_score.filtered$Patient,\"_\" , INVAR_score.filtered$Timepoint)\n# not sure what this patient is? problem with naming somehow?\nINVAR_score.filtered <- filter(INVAR_score.filtered, uniq_name != \"MR1022_00\")\n\nINVAR_score.filtered.selected <- select(INVAR_score.filtered, uniq_name, pt_mut_belongs_to, detection)\n# # remove colums where replicates agree with each other goes from 1456 to 672\n INVAR_score.filtered.selected <- distinct(INVAR_score.filtered.selected)\n INVAR_score.filtered.selected <- plyr::ddply(INVAR_score.filtered.selected, c(\"uniq_name\", \"pt_mut_belongs_to\"), function(x){\n   id <- mutate(x, id=1:n())\n   data.frame(id)\n })\n \n # remove anything with ID > 1 for now, will later subsample the datframe somehow\n nrow(filter(INVAR_score.filtered.selected, id > 1)) # lose another 22 samples\n \n # plyr::ddply(MELR_INVAR_score.filtered.selected, \"uniq_name\", function(x){\n #   \n #   if(nrow(x) > 1){\n #     print(\"downsampling\")\n #      # for each sample, randomly sample either rep 1 or rep2\n #     x.downsampled <- filter(x, id == sample(2, 1))\n #   } else{\n #     data.frame(x)\n #   }\n # })\n \nINVAR_score.filtered.selected <- filter(INVAR_score.filtered.selected, id == 1)\n \nINVAR_score.filtered.selected <- select(INVAR_score.filtered.selected, -id)\nINVAR_score.filtered.selected$detection <- as.character(INVAR_score.filtered.selected$detection)\nINVAR_score.filtered.selected <- tidyr::spread(INVAR_score.filtered.selected, pt_mut_belongs_to, detection)\n\nINVAR_score.filtered.selected.final <- INVAR_score.filtered.selected[,-1]\nrownames(INVAR_score.filtered.selected.final) <- INVAR_score.filtered.selected[,1]\n\n######## plotting heatmap\ncolours <- c(\"whitesmoke\", \"skyblue\")\n#, \"skyblue4\", \"mediumorchid3\")\nrow_split <- dplyr::inner_join(INVAR_score.filtered.selected, INVAR_score.filtered[, c(\"uniq_name\", \"Patient\")], by = \"uniq_name\")\nrow_split <- distinct(select(row_split, uniq_name, Patient))\nrow_split$Patient <- as.character(row_split$Patient)\nrow_split[!grepl(row_split$Patient, pattern = \"MR\"),'Patient'] <- \"healthy\"\n\nheatmap <- Heatmap(mat = INVAR_score.filtered.selected.final,\n                   col = colours,\n                   name = \"Detection\",\n                   row_title = \"Sample\",\n                   column_title = \"Mutation belonging to\",\n                   rect_gp = gpar(col = \"black\"),\n                   split = data.frame(row_split$Patient),\n                   gap = unit(2, \"mm\"),\n                   row_title_gp = gpar(alpha = 0))\n\npdf(paste0(plot_dir, \"p48_MELR_timecourse.pdf\"), width = 8, height = 10) \ndraw(heatmap)\ndev.off()\n```\n\n# ctDNA levels in all cohorts\n```{r}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"f0.9_s2.BQ_20.MQ_40.*INVAR_scores.txt\")\nINVAR_score.files <- INVAR_score.files[c(1,2,5)]\n\ncombined_INVAR <- data.frame()\n\nfor (i in 1:length(INVAR_score.files)) {\n  INVAR_score <- get.INVAR_score(INVAR_score.files[i], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = F) #, SLX_to_skip)\n  \n  combined_INVAR <- rbind(combined_INVAR, INVAR_score)\n}\n\ncombined_INVAR <- filter(combined_INVAR, overall_filter == \"INVAR_SCORE.using_size_TRUE_TRUE_TRUE\")\n\ntable(combined_INVAR$detection, combined_INVAR$data, combined_INVAR$Study)\n\ncombined_INVAR <- filter(combined_INVAR, data == \"ptspec\")\n\ncombined_INVAR <- left_join(combined_INVAR, SLX_layout[,c(\"input_into_library_ng\", \"quantification_method\", \"SLX_barcode\")], by = \"SLX_barcode\")\n\ncombined_INVAR <- combined_INVAR[!grepl(combined_INVAR$Timepoint, pattern = \"x\"),]\n \nggplot(filter(combined_INVAR, adjusted_ctDNA > 0, detection == \"TRUE\"), \n       aes(x = input_into_library_ng, y = adjusted_ctDNA))+\n  geom_point(aes(color = adjusted_ctDNA < 1/(input_into_library_ng*300*0.5)))+\n  theme_bw()+\n  labs(x = \"Library input (ng)\",\n       y = \"ctDNA level\",\n      title = \"ctDNA level of detected samples\",\n      subtitle = \"line = 1/(input_into_library_ng*300*0.5)\")+\n  theme(legend.position = \"none\")+\n  scale_y_log10()+\n  geom_line(aes(x = input_into_library_ng, y = 1/(input_into_library_ng*300*0.5)))\nggsave(paste0(plot_dir, \"p72_lib_input_vs_ctDNA_level.pdf\"), width = 6, height = 6)\n\n```\n\n# Correlation between cfDNA and ctDNA\n\n```{r correlation cfDNA and ctDNA}\nsource(file = \"Rmd/functions.R\", echo = T)\nsource(file = \"Rmd/plots.R\", echo = T)\n\nload(file = \"environments/TAPAS_env4.RData\")\nptspec <- blacklist(ptspec_f0.9_s5)\nnonptspec <- blacklist(nonptspec_f0.9_s5)\n\n#load(file = \"environments/TAPAS_env5.1.RData\") \n#ptspec <- blacklist(`ptspec_f0.9_s5.115-190_250-400_440-460`)\n#nonptspec <- blacklist(`nonptspec_f0.9_s5.115-190_250-400_440-460`)\n\nnonptspec <- nonptspec[nonptspec$uniq_pos %in% ptspec$uniq_pos,]\n\nptspec <- get.12_error_classes(ptspec)\nnonptspec <- get.12_error_classes(nonptspec)\n\nload(\"input/overall_error_rates.Rdata\")\nload(\"input/error_rates.summary_12_class.170624.Rdata\")\nerror_rate_12class <- error_rates.summary[,c(\"mut_class\",\"sample_type\" ,\"mut_sum\",\"DP\", \"mut_rate_per_read\")]\n\n# downsample the nonptspec dataframe so that it contains the same amount of data as the ptspec dataframe\nprint('downsampling nonptspec dataframe according to the number of rows in the ptspec dataframe')\nnonptspec.sampled <- nonptspec[sample(nrow(nonptspec), nrow(ptspec)),]\n\n## Detect ctDNA with an overall measure i.e. no classes\nplasma.detected <- detect_all_class.fisher(ptspec, nonptspec.sampled, urine = F, by = 'pt_timepoint', strand_bias_threshold = 1, error_rates.output)\nplasma.detected$detected <- plasma.detected$prob <= roc_detection(plasma.detected, prob = 'prob')$threshold\n\nctDNA_cfDNA_correl <- annotate_with_cfDNA(plasma.detected)\nctDNA_cfDNA_correl <- ctDNA_cfDNA_correl[grepl(ctDNA_cfDNA_correl$sample_name_data, pattern = 'test'),]\n\nctDNA_cfDNA_correl <- ctDNA_cfDNA_correl[ctDNA_cfDNA_correl$corrected_AF > 0,]\ncor.test(ctDNA_cfDNA_correl$corrected_AF, as.numeric(as.character(ctDNA_cfDNA_correl$GE_ml_body_fluid)))\n\n```\n\n# Supplementary tables\n\n```{r Panel info - supplementary table}\npanel_path <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/INVAR_EXPT/INV020\"), full.names = T)\n\nAVASTM.panel <- read.csv(panel_path[1])\nLUCID.panel <- read.csv(panel_path[2])\nMELR.panel <- read.csv(panel_path[3])\n\nAVASTM.panel$study <- \"AVASTM\"\nLUCID.panel$study <- \"LUCID\"\nMELR.panel$study <- \"MELR\"\n\nAVASTM.panel$cancer_type <- \"melanoma\"\nLUCID.panel$cancer_type <- \"lung\"\nMELR.panel$cancer_type <- \"melanoma\"\n\ncolnames(AVASTM.panel) <- tolower(colnames(AVASTM.panel))\ncolnames(LUCID.panel) <- tolower(colnames(LUCID.panel))\ncolnames(MELR.panel) <- tolower(colnames(MELR.panel))\n\ncolnames(AVASTM.panel)\ncolnames(MELR.panel)\ncolnames(LUCID.panel)\n\ncolnames_needed <- c(\"chr\", \"pos\", \"ref\", \"alt\", \"gene\", \"dp\", \"tumour_af\", \"patient\", \"study\", \"cancer_type\", \"panel_number\")\n\n# fix study specific naming\ncolnames(MELR.panel)[colnames(MELR.panel) == \"td\"] <- \"dp\"\n\n## tidy LUCID data\nLUCID.panel <- LUCID.panel[!grepl(LUCID.panel$lesion, pattern = \"NR\"),]\n\n# take only 10 melr patients\nmelr_patients <- filter(data.frame(table(MELR.panel$patient)), Freq >= 100)[,1]\nMELR.panel <- MELR.panel[MELR.panel$patient %in% melr_patients, ]\n\n## add panel numbers on \nMELR.panel$panel_number <- 8\nLUCID.panel$panel_number <- 9\nupdate_names <- function(panel, colnames_needed){\n  \n  print(colnames(panel))\n  for(x in colnames_needed){\n  colnames(panel)[grep(colnames(panel), pattern = x)] <- x\n  print(paste(x, x %in% colnames(panel)))\n  }\n  \n  print(\"returning\")\n  return(panel[,colnames_needed])\n}\n\nAVASTM.panel.tidy <- update_names(panel = AVASTM.panel, colnames_needed = colnames_needed) %>% filter(dp >= 5)\nMELR.panel.tidy <- update_names(panel = MELR.panel, colnames_needed)%>% filter(dp >= 5, tumour_af > 0)\n\n# LUCID - add gene and dp\nLUCID.full <- read.csv(panel_path[4])\nLUCID.for_VEP <- LUCID.full[,1:4]\nLUCID.for_VEP$CHROM <- gsub(LUCID.for_VEP$CHROM, pattern = \"chr\", replacement = \"\")\nLUCID.for_VEP$extra_col <- \".\"\n\nLUCID.for_VEP <- LUCID.for_VEP[,c(1,2,5,3,4)]\n\n#write.table(LUCID.for_VEP, file = paste0(tapas_mount_point, \"group_folders/TAPAS/INVAR_EXPT/INV020/VEP/LUCID_for_VEP.txt\"), \n#            col.names = F, \n#            row.names = F, \n#            quote = F, sep = \"\\t\")\n\n# read in gene names\nLUCID_gene_names <- read.table(paste0(tapas_mount_point, \"group_folders/TAPAS/INVAR_EXPT/INV020/VEP/4GlO15LXz4DJR9d2.txt\"))\nLUCID_gene_names <- LUCID_gene_names[,c(2,6)]\nLUCID_gene_names <- LUCID_gene_names[!duplicated(LUCID_gene_names$V2),]\n\nLUCID_gene_names$V2 <- paste0(\"chr\", unlist(lapply(strsplit(as.character(LUCID_gene_names$V2), split = \"-\"), \"[[\",1)))\ncolnames(LUCID_gene_names) <- c(\"uniq_pos\", \"gene\")\n\nLUCID.full$uniq_pos <- gsub(LUCID.full$uniq, pattern = \"_\", replacement = \":\")\n\nLUCID.full <- left_join(LUCID.full, LUCID_gene_names, by = \"uniq_pos\")\nLUCID.panel <- left_join(LUCID.panel, LUCID.full[,c(7,11,13,14)], by = c(\"patient\", \"uniq_pos\"))\n\ncolnames(LUCID.panel)[colnames(LUCID.panel) == \"T_DP\"] <- \"dp\"\n\nLUCID.panel.tidy <- update_names(panel = LUCID.panel, colnames_needed)\n\n### combine all panels\nLUCID.panel.tidy$patient <- as.character(LUCID.panel.tidy$patient)\npanels_supplementary <- rbind(AVASTM.panel.tidy, MELR.panel.tidy, LUCID.panel.tidy)\n\n# deduplicate mutliple samples per patient\npanels_supplementary$pt_uniq_pos <- paste0(panels_supplementary$patient, \"_\", panels_supplementary$chr, \":\", panels_supplementary$pos)\npanels_supplementary <- panels_supplementary[!duplicated(panels_supplementary$pt_uniq_pos),]\n\nwrite.csv(panels_supplementary, quote = F, row.names = F, file = \"~/Dropbox/INVAR_TAPAS/Tables/S2_tumour_mutations.csv\")\n\n## average AF by study\nplyr::ddply(panels_supplementary, \"study\", function(x){summary(x$tumour_af)})\n\n## n muts per patient\nmuts_per_patient <- plyr::ddply(panels_supplementary, c(\"patient\", \"study\"), function(x){nrow(x)})\nplyr::ddply(muts_per_patient, \"study\", function(x){summary(x[,3])})\n\n# panel details\npanels_supplementary$uniq_pos <- paste0(panels_supplementary$chr, \":\", panels_supplementary$pos)\n\npanel_summary <- plyr::ddply(panels_supplementary, c(\"study\", \"panel_number\"), function(x){\n  n_patients <- length(unique(x$patient))\n  n_mutations <- length(unique(x$uniq_pos))\n  panel_size_in_mb <- (length(unique(x$uniq_pos))*120)*1e-6\n\n  data.frame(n_patients, n_mutations = n_mutations, panel_size_in_mb = panel_size_in_mb)\n})\nwrite.csv(panel_summary, file = \"~/Dropbox/INVAR_TAPAS/Tables/S1_TAPAS_panel_summary.csv\", \n            quote = F, row.names = F)\n```\n\n```{r S2 - Mutations per patient and proportion of private mutations}\npanels_supplementary <- read.csv(\"~/Dropbox/INVAR_TAPAS/Tables/S2_tumour_mutations.csv\")\n\nmuts_per_patient <- plyr::ddply(panels_supplementary, c(\"patient\", \"cancer_type\"), function(x){nrow(x)})\n\nplyr::ddply(muts_per_patient, \"cancer_type\", function(x){summary(x[,3])})\n\n## proportion of private mutations\npanels_supplementary$uniq_pos <- paste0(panels_supplementary$chr, \":\", panels_supplementary$pos)\n\npanels_supplementary <- filter(panels_supplementary, !grepl(\";\", patient))\n\nproportion_private <- plyr::ddply(panels_supplementary, \"study\", function(x){\n  non_duplicated <- nrow(x[!duplicated(x$uniq_pos), ])\n  total <- nrow(x)\n  \n  data.frame(non_duplicated, total, proportion_unique = non_duplicated / total)\n})\n\n# calculate median\nmedian(proportion_private$proportion_unique)\n\n```\n\n```{r Supplementary - combined SLX table}\n# upload and prepare SLX layout table -----------------------------\nSLX_layout <- read.csv(file = \"~/tapas_pipeline/inputs/combined.SLX_table.180124.csv\",\n    header = TRUE)\nSLX_layout$barcode. <- gsub(SLX_layout$barcode., pattern = \"-\", replacement = \"_\")\nSLX_layout$SLX_barcode <- paste0(SLX_layout$SLX_ID, \"_\", SLX_layout$barcode.)\n\nSLX_layout <- filter(SLX_layout, sample_type != \"urine_DNA_supernatant\")\n\nS2 <- SLX_layout[,c(\"Study\", \"sample_name\", \"sample_type\", \"case_or_control\", \"SLX_ID\", \"barcode.\", \"sequencer\", \"library_prep\", \"capture_protocol\", \"targets_filename\", \"input_into_library_ng\", \"Patient\")]\nS2 <- S2[!grepl(S2$sample_name, pattern = \"accident\"),]\n\n# median raw seq depth per sample and which ones were QC fail\n\n```\n\n# MELR - ctDNA vs. tumour volume vs. LDH\n\n```{r MELR clinical data}\nclinical.data.raw <- read.csv(file=\"~/Desktop/MelResist - Jonathan/Data/Raw/MELR_clinical_data/MELR_clinical_data.parsed.JXP0009.csv\") \nblood.tests.raw <- read.csv(file = paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/blood_tests.JXP0009.csv\"))\n\n## function to remake sample dates file, object is saved already though\n#make_sample_dates_file()\n\n## get treatment dates only for pts\nget.treatment_dates <- function(clinical.data.raw){\n  clinical.data.raw <- clinical.data.raw[!is.na(clinical.data.raw$Start),]\n  clinical.data.raw$Patient <- paste0(\"MR10\", gsub(clinical.data.raw$Label, pattern = \"0(..)_.*\", replacement = \"\\\\1\"))\n  clinical.data.raw <- clinical.data.raw[clinical.data.raw$Patient %in% c(\"MR1002\", \"MR1004\", \"MR1006\", \"MR1010\", \"MR1012\", \"MR1014\", \"MR1020\", \"MR1022\", \"MR1032\"),]\n\n  clinical.data.raw <- plyr::ddply(clinical.data.raw, c(\"Patient\", \"Treatment\"), function(x){\n    start <- min(x[,c(\"Start\", \"Stop\")])\n    stop <- max(x[,c(\"Start\", \"Stop\")])\n    data.frame(start, stop)\n  })\n  clinical.data.raw[grepl(clinical.data.raw$Treatment, pattern = \"MLN2480\"), 'Treatment'] <- \"MLN2480\"\n  return(clinical.data.raw)\n}\ntreatment_dates <- get.treatment_dates(clinical.data.raw)\n\n## get LDH\nparse.LDH_table <- function(){\n  # do not run this - I have annotated the table with time points that are similar to sample time points\n  LDH.raw <-read.csv(file=\"~/Desktop/TAPAS/input/LDH.data.JXP0009.csv\") \n  LDH.raw$patient <- paste0(\"MR10\", gsub(LDH.raw$patient, pattern = \"0(..)_.*\", replacement = \"\\\\1\"))\n  LDH.raw <- LDH.raw[LDH.raw$patient %in% c(\"MR1002\", \"MR1004\", \"MR1006\", \"MR1010\", \"MR1012\", \"MR1014\", \"MR1020\", \"MR1022\", \"MR1032\"), ]\n  LDH.raw <- LDH.raw[LDH.raw$Site == \"n01\",]\n  #write.csv(LDH.raw, \"~/Dropbox/INVAR_TAPAS/Tables/LDH.csv\", quote = F, row.names = F)\n} \nLDH <- read.csv(\"~/Dropbox/INVAR_TAPAS/Tables/LDH.csv\") %>% filter(evaluable == TRUE)\ncolnames(LDH)[c(1,3,4)] <- c(\"Patient\", \"time\", \"variable\")\nLDH$data <- \"LDH\"\n\n# baseline dates\nbaseline_dates <- baseline_dates <- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/JXP0149_baseline_ctDNA_and_death.csv\"))\nbaseline_dates <- baseline_dates[!is.na(baseline_dates$Start.ctDNA),]\nbaseline_dates$patient_id <- paste0(\"MR1\", gsub(baseline_dates$pt.id, pattern = \"(.*)_.*\", replacement = \"\\\\1\"))\nsurvival <- baseline_dates[,c(5,15)]\ncolnames(survival) <- c(\"survival\", \"Patient\")\nsurvival <- survival[survival$Patient %in% c(\"MR1002\", \"MR1004\", \"MR1006\", \"MR1010\", \"MR1012\", \"MR1014\", \"MR1020\", \"MR1022\", \"MR1032\"),]\n#\n\n```\n\n\n\n```{r ctDNA levels against tumour volumes}\n# Load in INVAR score files\nINVAR_score.files <- list.files(paste0(tapas_mount_point, \"group_folders/TAPAS/input/GLRT\"), full.names = T, pattern = \"INVAR_scores\")\n\nINVAR_score <- get.INVAR_score(INVAR_score.files[10], \n                               SLX_layout, \n                               adjust = T, \n                               outlier_suppression = 0.05, \n                               filter.pattern = \"TRUE_TRUE_TRUE\", \n                               skip_contamination_reassessment = F) #, SLX_to_skip)\n\nINVAR_score <- filter(INVAR_score, data == \"ptspec\", grepl(\"using\", overall_filter), !grepl(\"x\", Timepoint))\n\n# load dates\nsample_dates <- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/INVAR_MELR_sample_dates.csv\"))\nsample_dates$Timepoint <- gsub(sample_dates$Timepoint, pattern =\"T\", replacement = \"\")\ncolnames(sample_dates)[3] <- \"Patient\"\n\nINVAR_score <- left_join(INVAR_score[,18:28], sample_dates[,c(1,3,5)], by = c(\"Timepoint\", \"Patient\"))\n\n# ctDNA vs volume\ntumour_volume <- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/input/MELR/tumour_volume.csv\"))\ncolnames(tumour_volume)[1] <- \"Patient\"\ntumour_volume$Timepoint <- as.character(tumour_volume$Timepoint)\n\nINVAR_score <- left_join(INVAR_score, tumour_volume, by = c(\"Timepoint\", \"Patient\"))\n\nINVAR_score.average <- plyr::ddply(INVAR_score, c(\"Patient\", \"Timepoint\"), function(x){\n  data.frame(variable = mean(x$adjusted_ctDNA), time = unique(x$time))\n}) \nINVAR_score.average$data <- \"ctDNA\"\nvolumes <- INVAR_score[,c(7,8,12,14)]\nvolumes$data <- \"volume\"\ncolnames(volumes)[4] <- \"variable\"\n\nINVAR_score.average <- rbind(INVAR_score.average, volumes[,colnames(INVAR_score.average)])\n\nINVAR_score.average <- INVAR_score.average[order(INVAR_score.average$time),]\n\nINVAR_score.average.corrected_time <- plyr::ddply(INVAR_score.average, \"Patient\", function(x){\n  # correct time\n  start_ctDNA <- x$time[1]\n  x$time <- x$time - start_ctDNA\n  \n  data.frame(x)\n})\n\n# calculate max ctDNA level for MR1014\nsource(\"~/tapas_pipeline/R/confidence_interval_for_p_no_mutations.R\")\nINVAR_score.average.corrected_time[INVAR_score.average.corrected_time$Patient == \"MR1014\" & INVAR_score.average.corrected_time$Timepoint== 3 & INVAR_score.average.corrected_time$data == \"ctDNA\", 'variable'] <- find_p_confidence_interval(21000, 0.05)\n\n# Colour by detection\nINVAR_score.average.corrected_time$detection <- TRUE\n#INVAR_score.average.corrected_time[c(89,39),'detection'] <- \"one_replicate_only\"\nINVAR_score.average.corrected_time[c(16,89),'detection'] <- F\nINVAR_score.average.corrected_time$detection <- factor(INVAR_score.average.corrected_time$detection)\n\nctDNA <- INVAR_score.average.corrected_time[!is.na(INVAR_score.average.corrected_time$variable),] %>%filter(data == \"ctDNA\") \n\n# add treatment times\nctDNA <- left_join(ctDNA, treatment_dates, by = \"Patient\")\nctDNA$uniq <- paste0(ctDNA$Treatment, \"_\", ctDNA$start, \"_\", ctDNA$stop)\nctDNA[duplicated(ctDNA$uniq),7:9] <- NA\n\nlibrary(RColorBrewer)\ncolours <- brewer.pal(6,\"Set1\")\n\nctDNA$Patient <- factor(ctDNA$Patient, levels = unique(ctDNA[order(-ctDNA$variable), 'Patient'])[c(1:6,8,7,9)])\nctDNA$data <- \"ctDNA\"\n\nsurvival$Patient <- factor(survival$Patient, levels = unique(ctDNA[order(-ctDNA$variable), 'Patient'])[c(1:6,8,7,9)])\n\np75a <- ggplot(ctDNA, aes(x = time, y= variable, group= Patient))+\n  geom_rect(aes(xmin = start, xmax = stop, ymin= 0, ymax = Inf, fill = Treatment), \n              alpha = 0.25, colour = NA)+\n  geom_line(size = 1.1)+\n  scale_fill_manual(values = c(colours[1], \"white\", colours[2:5], \"black\", colours[6]))+\n  geom_point(shape = 21, aes(fill = detection), size = 2, show.legend = F)+\n  #scale_y_log10(limits = c(1e-6, 1), breaks = c(1e-6, 1e-4, 1e-2, 1))+ #\n  scale_y_log10()+\n  facet_grid(Patient ~ ., scales = \"free_x\")+\n  theme_bw()+\n  guides(colour = F)+\n  labs(x = \"Time\",\n       y = \"ctDNA fraction\",\n      title = \"ctDNA over time for all patients\")+\n  geom_vline(data = survival, aes(xintercept = survival), linetype = \"dashed\", colour = \"red\")+   theme(strip.text = element_text(size=8))\n\n# add treatment times\nLDH <- left_join(LDH, treatment_dates, by = \"Patient\")\nLDH$uniq <- paste0(LDH$Treatment, \"_\", LDH$start, \"_\", LDH$stop)\nLDH[duplicated(LDH$uniq),8:10] <- NA\n\nlibrary(RColorBrewer)\ncolours <- brewer.pal(6,\"Set1\")\n\nLDH$Patient <- factor(LDH$Patient, levels = unique(ctDNA[order(-ctDNA$variable), 'Patient'])[c(1:6,8,7,9)])\n\np75b <- ggplot(LDH, aes(x = time, y= variable, group= Patient))+\n  geom_rect(aes(xmin = start, xmax = stop, ymin= 0, ymax = Inf, fill = Treatment), \n              alpha = 0.25, colour = NA)+\n    geom_line(size = 1.1)+\n    geom_point(shape = 21, aes(fill = variable > 250), size = 2, show.legend = F)+\n  scale_fill_manual(values = c(colours[1], \"white\", colours[2:5], \"black\", colours[6]))+\n  #scale_y_log10()+\n  facet_grid(Patient ~ ., scales = \"free_x\")+\n  theme_bw()+\n  guides(colour = F)+\n  labs(x = \"Time\",\n       y = \"LDH concentration (IU/L)\",\n      title = \"Serum LDH over time for all patients\")+\n  geom_hline(yintercept = 250, linetype = \"dashed\", alpha = 0.5)+\n  geom_vline(data = survival, aes(xintercept = survival), linetype = \"dashed\", colour = \"red\")+   theme(strip.text = element_text(size=8))\n\nggarrange(p75a, p75b, ncol = 2, common.legend = TRUE, legend=\"bottom\")\nggsave(paste0(plot_dir, \"p75.2_ctDNA_change_over_time.faceted.pdf\"), width = 6, height = 7)\n\n```\n\n```{r Compare TAPAS vs TAm-seq BRAF/NRAS only}\ntamseq <- read.table(file = paste0(tapas_mount_point, \"group_folders/TAPAS/INVAR_EXPT/JXP0096/JXP0096_tamseq.txt\"), header = T)\n\nctDNA$pt_timepoint <- paste0(ctDNA$Patient, \"_\", ctDNA$Timepoint)\ntamseq$pt_timepoint <- paste0(tamseq$patient, \"_\", tamseq$Timepoint)\n\ntamseq <- tamseq[tamseq$pt_timepoint %in% ctDNA$pt_timepoint, ]\n\n# only take patients which demonstrate the point for the main figure\nnon_detected_pts <- unique(filter(tamseq, detection == FALSE)$patient)\ntamseq <- tamseq[tamseq$patient %in% non_detected_pts, ]\n\nctDNA.nondetected <- ctDNA#[ctDNA$Patient %in% non_detected_pts,]\nctDNA.nondetected$data <- \"TAPAS\"\ntamseq$data <- \"TAm-Seq\"\n\ncolnames(tamseq)[2] <- \"Patient\"\ncolnames(tamseq)[6] <- \"variable\"\n\n# annotate Tam-seq data with time\ntamseq$Timepoint <- as.character(tamseq$Timepoint)\ntamseq$detection <- factor(tamseq$detection)\n\ntamseq <- left_join(tamseq, ctDNA.nondetected[,c(1,2,4)], by = c(\"Patient\", \"Timepoint\"))\ntapas_tamseq <- rbind.fill(tamseq[,colnames(ctDNA.nondetected)[1:6]], ctDNA.nondetected)\ntapas_tamseq$Patient <- factor(tapas_tamseq$Patient, levels = unique(tapas_tamseq$Patient))\n\ntapas_tamseq[tapas_tamseq$detection == FALSE,'variable'] <- 1e-7\n\nggplot(filter(tapas_tamseq, data == \"TAPAS\"), aes(x = time, y= variable, group= Patient))+\n  geom_rect(aes(xmin = start, xmax = stop, ymin= 0, ymax = Inf, fill = Treatment), \n              alpha = 0.25, colour = NA)+\n  geom_line(data = filter(tapas_tamseq, data == \"TAm-Seq\"), size = 1.1, colour = \"red\", alpha = 0.7)+\n  geom_point(data = filter(tapas_tamseq, data == \"TAm-Seq\"), \n             shape = 21, \n             aes(fill = detection), \n             size = 2,\n             show.legend = F, colour = \"red\", alpha = 0.7)+\n  geom_line(size = 1.1, alpha = 0.7)+\n  scale_fill_manual(values = c(colours[1], \"white\", colours[2:5], alpha(\"black\", 0.7), colours[6]))+\n  geom_point(shape = 21, aes(fill = detection), size = 2, show.legend = F, alpha = 0.7)+\n  scale_y_log10(limits = c(5e-8,1),\n              breaks = c(1e-7, 1e-6, 1e-4, 1e-2, 1),\n              labels = c(\"ND\", \"1e-06\", \"1e-04\", \"1e-02\", \"1\"))+ #\n # scale_y_log10()+\n  facet_wrap(~Patient, scales = \"free_x\")+ #\n  theme_bw()+\n  guides(colour = F)+\n  labs(x = \"Time\",\n       y = \"ctDNA fraction\",\n      title = \"TAm-Seq (red) vs. TAPAS (black)\")\n\n# Plot TAm-seq against TAPAS\nmerged <- left_join(filter(tapas_tamseq, data == \"TAm-Seq\")[,c(1,2,3,6)], \n          filter(tapas_tamseq, data == \"TAPAS\")[,c(1,2,3,6)], \n          by = c(\"Patient\", \"Timepoint\"))\nmerged$uniq <- paste0(merged$Patient, \"_\", merged$Timepoint)\nmerged <- merged[!duplicated(merged$uniq),]\n\nmerged[merged$variable.x == 1e-7, 'variable.x'] <- 1e-5\n\nggplot(merged, aes(x = variable.x, y = variable.y))+\n  geom_point()+\n  #geom_smooth(method = \"lm\")+\n  scale_x_log10(breaks = c(1e-5, 1e-4, 1e-2, 1),\n              labels = c(\"ND\", \"1e-04\", \"1e-02\", \"1\"))+\n  scale_y_log10()+\n  labs(x = \"Allele fraction - amplicon sequencing\",\n       y = \"Allele fraction - capture sequencing\",\n      title = \"TAm-Seq (red) vs. TAPAS (black) AFs\")+ #\n  theme_bw()+\n  geom_abline(slope = 1, linetype = \"dashed\")\nggsave(paste0(plot_dir, \"p78_amplicon_vs_capture.pdf\"), width = 5, height = 4)\n```\n\n```{r Spider plot}\n# p75 - spider plot \nspider <- filter(INVAR_score.average, data == \"ctDNA\")\nspider <- spider[order(spider$time),]\n\nspider <- plyr::ddply(spider, \"Patient\", function(x){\n  # correct time\n  start_ctDNA <- x$time[1]\n  x$time <- x$time - start_ctDNA\n  \n  # ctDNA change from baseline\n  start_ctDNA <- x$variable[1]\n  x$fold_change <- x$variable/start_ctDNA\n  \n  data.frame(x)\n})\n\nfilter(spider, Patient != \"MR1032\") %>%\nggplot(aes(x = time, y = fold_change, group = Patient, colour= Patient, show.legend = F))+ #colour= Patient\n  geom_line(size = 1.1)+\n  geom_point(shape = 21, size = 2, show.legend = F)+\n  scale_y_log10()+\n  #scale_x_continuous(limits = c(0,500))+\n  scale_x_log10()+\n  theme_bw()+\n  labs(x = \"Time from 1st time point\",\n       y = \"Fold-change in ctDNA fraction\",\n      title = \"MELR - spider plot for patients who had anti-BRAF therapy\")\nggsave(paste0(plot_dir, \"p75_ctDNA_fold_change_over_time.pdf\"), width = 5, height = 4)\n\n# median fall in ctDNA is not so informative, instead the lowest level is important\nfilter(spider, Patient != \"MR1032\") %>%\n  plyr::ddply(\"Patient\", function(x){\n    data.frame(greatest_fold_change = min(x$fold_change))\n  })\n```\n\n```{r tumour volume vs ctDNA}\n# tumour volume vs ctDNA\nfilter(INVAR_score, Patient != \"MR1014\") %>%\nggplot( aes(x = volume_ml , y=  adjusted_ctDNA))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = T)+\n  scale_y_log10(limits = c(1e-6, 1), breaks = c(1e-6, 1e-4, 1e-2, 1))+\n  scale_x_log10()+\n  theme_bw()+\n  labs(x = \"Tumour volume from CT\",\n       y = \"ctDNA fraction\",\n      title = \"CT scan vs ctDNA\")\nggsave(paste0(plot_dir, \"p73_ctDNA_vs_tumour_vol.pdf\"), width = 5, height = 4)\n\nsummary(lm(data = filter(INVAR_score, Patient != \"MR1014\", adjusted_ctDNA>0), \n           log10(volume_ml) ~ log10(adjusted_ctDNA)))\n\n```\n\n\nMR1014 is excluded because their ctDNA levels cannot be known with the current number of molecules.\n\n```{r INV030 - lowest ctDNA following treatment and survival}\n# lowest ctDNA level per patients that had targeted therapy first\nnadir_ctDNA_vs_survival <- filter(INVAR_score.average, data == \"ctDNA\", variable > 0)%>%\nplyr::ddply(\"Patient\", function(x){\n  data.frame(min = min(x$variable), nadir_time = x[x$variable == min(x$variable), \"time\"])\n})\n\n# max estimate for MR1014\n#source(\"~/tapas_pipeline/R/confidence_interval_for_p_no_mutations.R\")\n#nadir_ctDNA_vs_survival[nadir_ctDNA_vs_survival$Patient == \"MR1014\", 'min'] <- #find_p_confidence_interval(21000, 0.05)\n\n# survival time\ncolnames(baseline_dates)[15] <- \"Patient\"\nnadir_ctDNA_vs_survival <- left_join(nadir_ctDNA_vs_survival, baseline_dates[,c(5,15)], by = \"Patient\")\nnadir_ctDNA_vs_survival$survival.corrected <- nadir_ctDNA_vs_survival$Survival - nadir_ctDNA_vs_survival$nadir_time\n\nggplot(nadir_ctDNA_vs_survival, aes(x = min, y = survival.corrected))+\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  scale_x_log10()#+\n  #scale_y_log10()\n\nnadir_ctDNA_vs_survival$one_year_survival <- nadir_ctDNA_vs_survival$survival.corrected > 365\n\ncut_off <- OptimalCutpoints::optimal.cutpoints(data =nadir_ctDNA_vs_survival, X = \"min\", status = \"one_year_survival\", tag.healthy = \"TRUE\", methods = \"CB\")$CB$Global$optimal.cutoff$cutoff\n\n# split into above and below median\nnadir_ctDNA_vs_survival$low_ctDNA <- nadir_ctDNA_vs_survival$min < cut_off\n\n## Kaplan meier \nlibrary(survival)\nnadir_ctDNA_vs_survival$alive <- 1\n\nnadir_ctDNA_vs_survival$surv <- Surv(nadir_ctDNA_vs_survival$survival.corrected, nadir_ctDNA_vs_survival$alive)\nsurvival.km <- survfit(surv ~ low_ctDNA, data = nadir_ctDNA_vs_survival)\n\nplot(survival.km, \n     mark.time = T, \n     conf.int = T, \n     col=c(\"red\",\"blue\"))\n\n# Log-rank test\nsurvdiff(nadir_ctDNA_vs_survival$surv ~ nadir_ctDNA_vs_survival$low_ctDNA)\n\n# patients who clear ctDNA do better than those that do not. Needs to be confirmed with a larger sample size\nplot.kaplan_meier(survival.km)\nggsave(paste0(plot_dir, \"p74_ctDNA_at_nadir_vs_survival.pdf\"), width = 6, height = 4)\n\n  \n```\n\n\n```{r Detect ctDNA in MR1003 plasma variants}\nsource(file = \"Rmd/functions.R\", echo = T)\nsource(file = \"Rmd/plots.R\", echo = T)\n\nload(\"environments/TAPAS_env18.RData\")\nptspec <- remove_mixture_data(blacklist(ptspec_MR1003_unfiltered))\nload(\"environments/TAPAS_env9.RData\")\nnonptspec <- remove_mixture_data(blacklist(nonptspec_unfiltered))\n\nMR1003 <- ptspec\n\nplasma.detected <- detect_all_class.fisher(ptspec, nonptspec, urine = F, by = 'pt_timepoint', strand_bias_threshold = 10)\n\nplot.MR1003_overall_AF_vs_time(plasma.detected)\n\n## Same analysis, with f0.9_s3\nload(\"environments/TAPAS_env20.RData\")\nptspec <- remove_mixture_data(blacklist(ptspec_MR1003_f0.9_s3))\nload(\"environments/TAPAS_env8.RData\")\nnonptspec <- remove_mixture_data(blacklist(nonptspec_f0.9_s3))\n\nMR1003 <- ptspec\n\nplasma.detected <- detect_all_class.fisher(ptspec, nonptspec, urine = F, by = 'pt_timepoint', strand_bias_threshold = 1)\n\nplot.MR1003_overall_AF_vs_time(plasma.detected)\n```\n\n# LUCID cfDNA concentration\n```{r}\nload(\"~/Desktop/JXPT/JXP0290/LUCID.INVAR_SCORE.180411.Rdata\")\nLUCID_ptspec <- filter(INVAR_score, grepl(\"using\", GLRT_setting), data == \"ptspec\")\nLUCID_ptspec.short <- LUCID_ptspec[,c(\"Study\", \"adjusted_ctDNA\", \"DP\", \"detection\", \"Patient\")]\n\n\nLUCID_dPCR_data <- read.csv(paste0(tapas_mount_point, \"group_folders/TAPAS/INVAR_EXPT/INV022/LUCID_dPCR_data.csv\"), header = TRUE)\nLUCID_dPCR_data$Study <- \"LUCID\"\nLUCID_dPCR_data$Patient_ID <- gsub(LUCID_dPCR_data$Patient_ID, pattern = \"LUCID\", replacement = \"\")\nLUCID_dPCR_data$Patient_ID <- gsub(LUCID_dPCR_data$Patient_ID, pattern = \"LUC\", replacement = \"\")\nLUCID_dPCR_data$timepoint <- substr(LUCID_dPCR_data$Sample_ID, 8, 15)\n# you will want anything from timwpoitn B since this is the baseline \n\nLUCID_dPCR_data <- LUCID_dPCR_data[grepl(LUCID_dPCR_data$timepoint, pattern = \"B\"), ]\ncolnames(LUCID_dPCR_data)[4] <- \"Patient\"\n\n#LUCID_ptspec.short[LUCID_ptspec.short$adjusted_ctDNA == 0 , 'adjusted_ctDNA'] <- 1/LUCID_ptspec.short[LUCID_ptspec.short$adjusted_ctDNA == 0 , 'DP']\n\nLUCID_ptspec.short <- left_join(LUCID_ptspec.short, LUCID_dPCR_data[,c(4,19)])\nLUCID_ptspec.short$conc <- LUCID_ptspec.short$adjusted_ctDNA * LUCID_ptspec.short$GE.ml.body.fluid \n\n1/median(filter(LUCID_ptspec.short, detection == FALSE)$DP)\n  \nggplot(LUCID_ptspec.short, aes(x = detection, y = DP))+\n  geom_boxplot()+\n  scale_y_log10()\n```\n\n\n# TAm-Seq BRAF or NRAS in MELR\n\n```{r Parse JXP0096 - TAm-Seq }\nsource(\"~/tapas_paper/functions.R\")\nsetwd(\"/Users/wan01/groups/research/nrlab/group/group_folders/JONATHAN/MelR/itamseq_raw/input/\")\n\n## Read in clinical data\nclin <- parse_clinical_data(\"MelR_data290616.csv\")\nLDH <- get_LDH(\"MelR_data290616.csv\")\n\n## Read in barcodes/names and cfDNA information for all experiments run for this iTAm-Seq project\nbarcodes <- read.csv(file = \"barcodes_cfDNA.csv\") \n\n## Read in biorep blood test dates\nget_blood_test_dates(\"MELR_BIOREPOSITORY_SAMPLELIST_20150409.csv\")\n\n## Read in raw sequencing data from test samples (i.e. containing patient samples)\nsetwd(\"../test_samples\")\nraw <- import_raw_data_test_samples()\nraw <- swap_barcodes(raw) ## Convert barcodes to real names\nraw$FLD_n <- as.numeric(substr(raw$FLD, 5,7))\n\n## Add timepoint data to raw dataframe\nraw$pt_timepoint <- paste(raw$patient, raw$Timepoint, sep=\"_\")\nblood.test.dates$pt_timepoint <- paste(blood.test.dates$patient, blood.test.dates$timepoint, sep=\"_\")\nraw_cfDNA <- merge(raw, blood.test.dates[,c(3,5)], by='pt_timepoint')\n\n## Read in control PPC data in preparatation for mutation calling\nsetwd(\"../controls\")\ncontrols <- import_raw_data_test_samples()\ncontrols <- swap_barcodes(controls)\n### Note that horizon DNA might have a BRAF mutation in it?? Otherwise probably suitable as a control\n\nraw$uniq <- paste(raw$SLX, raw$FLD, sep=\"_\")\n\nmut_rate_per_read <- plyr::ddply(raw, c('uniq', 'ID_long', 'patient', 'Timepoint'), function(x){\n  data.frame(reads = sum(x$reads, na.rm = T), \n             depth = sum(x$depth, na.rm = T), \n             mut_rate = sum(x$reads, na.rm = T)/sum(x$depth, na.rm = T))\n})\n\n\n## Get a mut rate for BRAF only\n\nraw_BRAF <- raw[grepl(raw$mut_uniq, pattern = 'BRAF|NRAS'),]\n\nraw_BRAF <- raw_BRAF[!grepl(raw_BRAF$mut_uniq, pattern = \"G12\"),]\nraw_BRAF <- raw_BRAF[!grepl(raw_BRAF$mut_uniq, pattern = \"G12\"),]\n\nBRAF_mut_rate_per_read <- plyr::ddply(raw_BRAF, c(\"mut_uniq\", 'uniq', 'ID_long', 'patient', 'Timepoint'), function(x){\n  data.frame(reads = sum(x$reads, na.rm = T), \n             depth = sum(x$depth, na.rm = T), \n             mut_rate = sum(x$reads, na.rm = T)/sum(x$depth, na.rm = T))\n})\nmut_rate_per_read <- dplyr::filter(BRAF_mut_rate_per_read, depth > 1000)\n\n# annotate\nmut_rate_per_read[grepl(mut_rate_per_read$ID_long, pattern = \"URINE\"),'sample_type'] <- \"urine\"\nmut_rate_per_read[!grepl(mut_rate_per_read$ID_long, pattern = \"URINE\"),'sample_type'] <- \"plasma\"\nmut_rate_per_read[grepl(mut_rate_per_read$ID_long, pattern = \"PD\"), \"sample_type\"] <- \"tumour\"\n\nmut_rate_per_read[grepl(mut_rate_per_read$ID_long, pattern = \"PPC\"), \"case_or_control\"] <- \"control\"\nmut_rate_per_read[!grepl(mut_rate_per_read$ID_long, pattern = \"PPC\"), \"case_or_control\"] <- \"case\"\nmut_rate_per_read$dilution <- grepl(mut_rate_per_read$ID_long, pattern = \"dil|x\")\n\ntamseq <- filter(mut_rate_per_read, sample_type == \"plasma\", case_or_control == \"case\", dilution == F, !grepl(\"H2O|BC|BUFFY\", ID_long))\ncontrol <- filter(mut_rate_per_read, sample_type == \"plasma\", grepl(\"PPC\", ID_long))\n\n# get threshold for BRAF \nthresholds <- plyr::ddply(control, \"mut_uniq\", function(x){\n   data.frame(threshold = quantile(x$mut_rate, 0.97))\n})\n\n# only take NRAS for MR1032\ntamseq <- filter(tamseq, (grepl(\"NRAS\", mut_uniq) & patient == \"MR1032\") | (grepl(\"140453136_A_T_BRAF\", mut_uniq) & patient != \"MR1032\"))\n\ntamseq.average <- plyr::ddply(tamseq, c(\"mut_uniq\", \"patient\", \"Timepoint\"), function(x){\n  data.frame(reads = sum(x$reads, na.rm = T), \n             depth = sum(x$depth, na.rm = T), \n             mut_rate = sum(x$reads, na.rm = T)/sum(x$depth, na.rm = T))\n})\n\ntamseq.average <- left_join(tamseq.average, thresholds, by = \"mut_uniq\")\ntamseq.average$detection <- tamseq.average$mut_rate > tamseq.average$threshold\n\n# plot\nggplot(tamseq.average, aes(x = Timepoint, y = mut_rate, fill = detection, group = mut_uniq))+\n  geom_point(shape = 21)+\n  geom_line()+\n  facet_grid(patient ~ .)+\n  scale_y_log10()\n\n#write.table(tamseq.average, file = \"/Users/wan01/groups/research/nrlab/group/group_folders/TAPAS/INVAR_EXPT/JXP0096/JXP0096_tamseq.txt\", quote = F, row.names = F)\n```\n",
    "created" : 1524564691592.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "369211458",
    "id" : "268CE3AD",
    "lastKnownWriteTime" : 1524572960,
    "last_content_update" : 1524572960539,
    "path" : "~/tapas_paper/TAPAS5_paper_submission_code.Rmd",
    "project_path" : null,
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}